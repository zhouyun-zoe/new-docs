{"remainingRequest":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/babel-loader/lib/index.js??ref--7-1!/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--7-2!/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--7-3!/Users/Yun/Desktop/vdocs/website/new-docs/docs/advanced/core/storage.md","dependencies":[{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/docs/advanced/core/storage.md","mtime":1595924653797},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/.docusaurus/docusaurus-plugin-content-docs/site-docs-advanced-core-storage-md-25a.json","mtime":1596108300057},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/cache-loader/dist/cjs.js","mtime":1588759099254},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/babel-loader/lib/index.js","mtime":1588759098876},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1588759134386},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1588759133114}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL1l1bi9EZXNrdG9wL3Zkb2NzL3dlYnNpdGUvbmV3LWRvY3Mvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMiO2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7ZXhwb3J0IGNvbnN0IGZyb250TWF0dGVyPXt0aXRsZTonU3RvcmFnZSd9O2V4cG9ydCBjb25zdCBtZXRhZGF0YT17ImlkIjoiYWR2YW5jZWQvY29yZS9zdG9yYWdlIiwidGl0bGUiOiJTdG9yYWdlIiwiZGVzY3JpcHRpb24iOiIjIOWtmOWCqOiuvuiuoSIsInNvdXJjZSI6IkBzaXRlL2RvY3MvYWR2YW5jZWQvY29yZS9zdG9yYWdlLm1kIiwicGVybWFsaW5rIjoiL25ldy1kb2NzL2RvY3MvYWR2YW5jZWQvY29yZS9zdG9yYWdlIiwiZWRpdFVybCI6Imh0dHBzOi8vZ2l0aHViLmNvbS9uZXJ2b3NuZXR3b3JrL211dGEvZWRpdC9tYXN0ZXIvd2Vic2l0ZS9kb2NzL2FkdmFuY2VkL2NvcmUvc3RvcmFnZS5tZCIsInNpZGViYXIiOiJkb2NzIiwicHJldmlvdXMiOnsidGl0bGUiOiJNZW1wb29sIiwicGVybWFsaW5rIjoiL25ldy1kb2NzL2RvY3MvYWR2YW5jZWQvY29yZS9tZW1wb29sIn0sIm5leHQiOnsidGl0bGUiOiJDcnlwdG9ncmFwaHkiLCJwZXJtYWxpbmsiOiIvbmV3LWRvY3MvZG9jcy9hZHZhbmNlZC9jcnlwdG8ifX07LyogQGpzeCBtZHggKi9leHBvcnQgY29uc3QgcmlnaHRUb2M9W3t2YWx1ZTon55uu5qCHJyxpZDon55uu5qCHJyxjaGlsZHJlbjpbXX0se3ZhbHVlOiforr7orqEnLGlkOiforr7orqEnLGNoaWxkcmVuOltdfSx7dmFsdWU6J+aOpeWPoycsaWQ6J+aOpeWPoycsY2hpbGRyZW46W3t2YWx1ZTonU3RvcmFnZScsaWQ6J3N0b3JhZ2UnLGNoaWxkcmVuOltdfSx7dmFsdWU6J0FkYXB0ZXInLGlkOidhZGFwdGVyJyxjaGlsZHJlbjpbXX1dfV07Y29uc3QgbWFrZVNob3J0Y29kZT1uYW1lPT5mdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKXtjb25zb2xlLndhcm4oIkNvbXBvbmVudCAiK25hbWUrIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlIik7cmV0dXJuIG1keCgiZGl2Iixwcm9wcyk7fTtjb25zdCBsYXlvdXRQcm9wcz17cmlnaHRUb2N9O2NvbnN0IE1EWExheW91dD0id3JhcHBlciI7ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudCh7Y29tcG9uZW50cywuLi5wcm9wc30pe3JldHVybiBtZHgoTURYTGF5b3V0LF9leHRlbmRzKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDEiLHsiaWQiOiLlrZjlgqjorr7orqEifSxg5a2Y5YKo6K6+6K6hYCksbWR4KCJoMiIseyJpZCI6IuebruaghyJ9LGDnm67moIdgKSxtZHgoInAiLG51bGwsYOWtmOWCqOaooeWdl+i0n+i0o+WvueS4iuWxguaooeWdl+aPkOS+m+aVsOaNrueahOeahOaMgeS5heWMluaUr+aMge+8jOmHh+eUqCBrZXktdmFsdWUg5pWw5o2u5bqT44CCYCksbWR4KCJwIixudWxsLGDmqKHlnZfkuLvopoHliIbkuKTkuKrnu4Tku7bvvJpgKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBTdG9yYWdlYCksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYEFkYXB0ZXJgKSksbWR4KCJwIixudWxsLGBTdG9yYWdlIOe7hOS7tuS4uuS4iuWxgue7hOS7tuaPkOS+m+S6hue7n+S4gOeahOaVsOaNruWtmOWCqOaOpeWPo++8jOiAjCBBZGFwdGVyIOWImei0n+i0o+WvueabtOW6leWxggrnmoTmlbDmja7lupPlhbfkvZPlrp7njrDmj5Dkvpvnu5/kuIDnmoTmir3osaHmjqXlj6PvvIzkvb/lvpfkuI3lkIznmoTmlbDmja7lupPlrp7njrDlj6/ku6Xmlrnkvr/nmoTmjqXlhaXjgIJgKSxtZHgoImgyIix7ImlkIjoi6K6+6K6hIn0sYOiuvuiuoWApLG1keCgicCIsbnVsbCxgU3RvcmFnZSDmjqXlj6Porr7orqHkuLvopoHlkozkuJrliqHpgLvovpHmnInlhbPvvIzlpKfkvZPliIbkuLrvvJpgKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBUcmFuc2FjdGlvbiDkuqTmmJPmlbDmja7lrZjlgqhgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgUmVjZWlwdCDkuqTmmJPlm57miaflrZjlgqhgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgRXBvY2gg5Z2X5a2Y5YKoYCksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYExhdGVzdFByb29mIOW9k+WJjeacgOaWsOWFseivhueahCBQcm9vZu+8jOWQjOatpemcgOimgWApKSxtZHgoInAiLG51bGwsYEFkYXB0ZXIg5o6l5Y+j6LSf6LSj5LiK6L+wIFN0b3JhZ2Ug6YC76L6R5a+55bqU55qE5pWw5o2u57uT5p6E77yM6YCa6L+HIFByb3RvY29sIOaPkOS+m+eahApDb2RlYyDluo/liJfljJbmjqXlj6PvvIzlrozmiJDlr7nmlbDmja7nmoTlrZjlgqjmk43kvZzjgILlpKfkvZPmk43kvZzlj6/ku6XliIbkuLrvvJpgKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBnZXRgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgaW5zZXJ0YCksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYHJlbW92ZWApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBpdGVyYCksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYGJhdGNoX21vZGlmeWApKSxtZHgoImgyIix7ImlkIjoi5o6l5Y+jIn0sYOaOpeWPo2ApLG1keCgiaDMiLHsiaWQiOiJzdG9yYWdlIn0sYFN0b3JhZ2VgKSxtZHgoImg0Iix7ImlkIjoi5Z+65pys5LiK6YCa55SoLWNyIn0sYOWfuuacrOS4iumAmueUqCBDUmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcnVzdCJ9KSxgYXN5bmMgZm4gZ2V0X3h4eCgmc2VsZiwga2V5OiBYWFgpIC0+IFByb3RvY29sUmVzdWx0PFhYWD47CmFzeW5jIGZuIGluc2VydF94eHgoJnNlbGYsIGtleTogWFhYLCB2YWx1ZTogWFhYKSAtPiBQcm90b2NvbFJlc3VsdDwoKT47CmFzeW5jIGZuIGNvbnRhaW5zX3h4eCgmc2VsZiwga2V5OiBYWFgpIC0+IFByb3RvY29sUmVzdWx0PGJvb2w+OwpgKSksbWR4KCJwIixudWxsLGDmsqHmnInmm7TmlrDlkozliKDpmaTmjqXlj6PvvIzku6XkuIvmmK/kvovlpJZgKSxtZHgoInAiLG51bGwsYExhdGVzdFByb29mIOacieabtOaWsOaOpeWPo++8jOS4lOaYr+WbuuWumueahCBLZXnjgIJgKSxtZHgoImgzIix7ImlkIjoiYWRhcHRlciJ9LGBBZGFwdGVyYCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1ydXN0In0pLGAjW2Rlcml2ZShEZWJ1ZywgQ29weSwgQ2xvbmUsIERpc3BsYXkpXQpwdWIgZW51bSBTdG9yYWdlQ2F0ZWdvcnkgewogICAgRXBvY2gsCiAgICBSZWNlaXB0LAogICAgU2lnbmVkVHJhbnNhY3Rpb24sCn0KCnB1YiB0cmFpdCBTdG9yYWdlU2NoZW1hIHsKICAgIHR5cGUgS2V5OiBQcm90b2NvbENvZGVjICsgU2VuZDsKICAgIHR5cGUgVmFsdWU6IFByb3RvY29sQ29kZWMgKyBTZW5kOwoKICAgIGZuIGNhdGVnb3J5KCkgLT4gU3RvcmFnZUNhdGVnb3J5Owp9CgojW2FzeW5jX3RyYWl0XQpwdWIgdHJhaXQgU3RvcmFnZTxBZGFwdGVyOiBTdG9yYWdlQWRhcHRlcj46IFNlbmQgKyBTeW5jIHsKICAgIGFzeW5jIGZuIGluc2VydF90cmFuc2FjdGlvbnMoJnNlbGYsIHNpZ25lZF90eHM6IFZlYzxTaWduZWRUcmFuc2FjdGlvbj4pIC0+IFByb3RvY29sUmVzdWx0PCgpPjsKCiAgICBhc3luYyBmbiBnZXRfdHJhbnNhY3Rpb25fYnlfaGFzaCgKICAgICAgICAmc2VsZiwKICAgICAgICB0eF9oYXNoOiBIYXNoLAogICAgKSAtPiBQcm90b2NvbFJlc3VsdDxPcHRpb248U2lnbmVkVHJhbnNhY3Rpb24+PjsKfQoKcHViIGVudW0gU3RvcmFnZUJhdGNoTW9kaWZ5PFM6IFN0b3JhZ2VTY2hlbWE+IHsKICAgIFJlbW92ZSwKICAgIEluc2VydCg8UyBhcyBTdG9yYWdlU2NoZW1hPjo6VmFsdWUpLAp9CgojW2FzeW5jX3RyYWl0XQpwdWIgdHJhaXQgU3RvcmFnZUFkYXB0ZXI6IFN5bmMgKyBTZW5kIHsKICAgIGFzeW5jIGZuIGluc2VydDxTOiBTdG9yYWdlU2NoZW1hPigKICAgICAgICAmc2VsZiwKICAgICAgICBrZXk6IDxTIGFzIFN0b3JhZ2VTY2hlbWE+OjpLZXksCiAgICAgICAgdmFsOiA8UyBhcyBTdG9yYWdlU2NoZW1hPjo6VmFsdWUsCiAgICApIC0+IFByb3RvY29sUmVzdWx0PCgpPjsKCiAgICBhc3luYyBmbiBnZXQ8UzogU3RvcmFnZVNjaGVtYT4oCiAgICAgICAgJnNlbGYsCiAgICAgICAga2V5OiA8UyBhcyBTdG9yYWdlU2NoZW1hPjo6S2V5LAogICAgKSAtPiBQcm90b2NvbFJlc3VsdDxPcHRpb248PFMgYXMgU3RvcmFnZVNjaGVtYT46OlZhbHVlPj47CgogICAgYXN5bmMgZm4gcmVtb3ZlPFM6IFN0b3JhZ2VTY2hlbWE+KCZzZWxmLCBrZXk6IDxTIGFzIFN0b3JhZ2VTY2hlbWE+OjpLZXkpIC0+IFByb3RvY29sUmVzdWx0PCgpPjsKCiAgICBhc3luYyBmbiBjb250YWluczxTOiBTdG9yYWdlU2NoZW1hPigKICAgICAgICAmc2VsZiwKICAgICAgICBrZXk6IDxTIGFzIFN0b3JhZ2VTY2hlbWE+OjpLZXksCiAgICApIC0+IFByb3RvY29sUmVzdWx0PGJvb2w+OwoKICAgIC8vIFRPRE86IFF1ZXJ5IHN0cnVjdD8KICAgIGZuIGl0ZXI8UzogU3RvcmFnZVNjaGVtYSArICdzdGF0aWM+KAogICAgICAgICZzZWxmLAogICAgICAgIGtleXM6IFZlYzw8UyBhcyBTdG9yYWdlU2NoZW1hPjo6S2V5PiwKICAgICkgLT4gQm94PGR5biBTdHJlYW08SXRlbSA9IFByb3RvY29sUmVzdWx0PE9wdGlvbjw8UyBhcyBTdG9yYWdlU2NoZW1hPjo6VmFsdWU+Pj4+OwoKICAgIGFzeW5jIGZuIGJhdGNoX21vZGlmeTxTOiBTdG9yYWdlU2NoZW1hPigKICAgICAgICAmc2VsZiwKICAgICAgICBrZXlzOiBWZWM8PFMgYXMgU3RvcmFnZVNjaGVtYT46OktleT4sCiAgICAgICAgdmFsczogVmVjPFN0b3JhZ2VCYXRjaE1vZGlmeTxTPj4sCiAgICApIC0+IFByb3RvY29sUmVzdWx0PCgpPjsKfQpgKSksbWR4KCJwIixudWxsLGBBZGFwdGVyIOmAmui/hyBTY2hlbWEg5ZKMIFByb3RvY29sIENvZGVj77yMIOebtOaOpeWvueW6lOihqOeahOaVsOaNrue7k+aehOi/m+ihjOW6j+WIl+WMluWSjOWPjeW6j+WIl+WMluaTjeS9nOOAglN0b3JhZ2Ug5bGC5peg6ZyA5YWz5b+D5bqP5YiX5YyW5ZKM5Y+N5bqP5YiX5pON5L2c77yM5ou/5Yiw55qE55u05o6l5bCx5piv5a+55bqU55qE5pWw5o2u57uT5p6E44CCYCksbWR4KCJwIixudWxsLGDkvb/nlKggU3RyZWFtIOWunueOsOW8guatpeWOn+eUn+eahOmBjeWOhu+8jOaJuemHj+ivu+WPluaTjeS9nOOAgmApLG1keCgicCIsbnVsbCxgQmF0Y2hNb2RpZnkg5YiZ5bCG5o+S5YWl5ZKM5Yig6Zmk6L+b6KGM5LqG5pW05ZCI77yM5o6l5Y+j56iN566A5rSB5bmy5YeA5LiA5Lqb44CCYCkpO307TURYQ29udGVudC5pc01EWENvbXBvbmVudD10cnVlOw=="},{"version":3,"sources":["/Users/Yun/Desktop/vdocs/website/new-docs/docs/advanced/core/storage.md"],"names":["React","mdx","frontMatter","title","metadata","rightToc","value","id","children","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["\n  import React from 'react';\n  import { mdx } from '@mdx-js/react';\n\n  export const frontMatter = {\n\ttitle: 'Storage'\n};\nexport const metadata = {\n  \"id\": \"advanced/core/storage\",\n  \"title\": \"Storage\",\n  \"description\": \"# 存储设计\",\n  \"source\": \"@site/docs/advanced/core/storage.md\",\n  \"permalink\": \"/new-docs/docs/advanced/core/storage\",\n  \"editUrl\": \"https://github.com/nervosnetwork/muta/edit/master/website/docs/advanced/core/storage.md\",\n  \"sidebar\": \"docs\",\n  \"previous\": {\n    \"title\": \"Mempool\",\n    \"permalink\": \"/new-docs/docs/advanced/core/mempool\"\n  },\n  \"next\": {\n    \"title\": \"Cryptography\",\n    \"permalink\": \"/new-docs/docs/advanced/crypto\"\n  }\n};\n  /* @jsx mdx */\n\nexport const rightToc = [{\n  value: '目标',\n  id: '目标',\n  children: []\n}, {\n  value: '设计',\n  id: '设计',\n  children: []\n}, {\n  value: '接口',\n  id: '接口',\n  children: [{\n    value: 'Storage',\n    id: 'storage',\n    children: []\n  }, {\n    value: 'Adapter',\n    id: 'adapter',\n    children: []\n  }]\n}];\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  rightToc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"存储设计\"\n    }}>{`存储设计`}</h1>\n    <h2 {...{\n      \"id\": \"目标\"\n    }}>{`目标`}</h2>\n    <p>{`存储模块负责对上层模块提供数据的的持久化支持，采用 key-value 数据库。`}</p>\n    <p>{`模块主要分两个组件：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Storage`}</li>\n      <li parentName=\"ul\">{`Adapter`}</li>\n    </ul>\n    <p>{`Storage 组件为上层组件提供了统一的数据存储接口，而 Adapter 则负责对更底层\n的数据库具体实现提供统一的抽象接口，使得不同的数据库实现可以方便的接入。`}</p>\n    <h2 {...{\n      \"id\": \"设计\"\n    }}>{`设计`}</h2>\n    <p>{`Storage 接口设计主要和业务逻辑有关，大体分为：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Transaction 交易数据存储`}</li>\n      <li parentName=\"ul\">{`Receipt 交易回执存储`}</li>\n      <li parentName=\"ul\">{`Epoch 块存储`}</li>\n      <li parentName=\"ul\">{`LatestProof 当前最新共识的 Proof，同步需要`}</li>\n    </ul>\n    <p>{`Adapter 接口负责上述 Storage 逻辑对应的数据结构，通过 Protocol 提供的\nCodec 序列化接口，完成对数据的存储操作。大体操作可以分为：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`get`}</li>\n      <li parentName=\"ul\">{`insert`}</li>\n      <li parentName=\"ul\">{`remove`}</li>\n      <li parentName=\"ul\">{`iter`}</li>\n      <li parentName=\"ul\">{`batch_modify`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"接口\"\n    }}>{`接口`}</h2>\n    <h3 {...{\n      \"id\": \"storage\"\n    }}>{`Storage`}</h3>\n    <h4 {...{\n      \"id\": \"基本上通用-cr\"\n    }}>{`基本上通用 CR`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`async fn get_xxx(&self, key: XXX) -> ProtocolResult<XXX>;\nasync fn insert_xxx(&self, key: XXX, value: XXX) -> ProtocolResult<()>;\nasync fn contains_xxx(&self, key: XXX) -> ProtocolResult<bool>;\n`}</code></pre>\n    <p>{`没有更新和删除接口，以下是例外`}</p>\n    <p>{`LatestProof 有更新接口，且是固定的 Key。`}</p>\n    <h3 {...{\n      \"id\": \"adapter\"\n    }}>{`Adapter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`#[derive(Debug, Copy, Clone, Display)]\npub enum StorageCategory {\n    Epoch,\n    Receipt,\n    SignedTransaction,\n}\n\npub trait StorageSchema {\n    type Key: ProtocolCodec + Send;\n    type Value: ProtocolCodec + Send;\n\n    fn category() -> StorageCategory;\n}\n\n#[async_trait]\npub trait Storage<Adapter: StorageAdapter>: Send + Sync {\n    async fn insert_transactions(&self, signed_txs: Vec<SignedTransaction>) -> ProtocolResult<()>;\n\n    async fn get_transaction_by_hash(\n        &self,\n        tx_hash: Hash,\n    ) -> ProtocolResult<Option<SignedTransaction>>;\n}\n\npub enum StorageBatchModify<S: StorageSchema> {\n    Remove,\n    Insert(<S as StorageSchema>::Value),\n}\n\n#[async_trait]\npub trait StorageAdapter: Sync + Send {\n    async fn insert<S: StorageSchema>(\n        &self,\n        key: <S as StorageSchema>::Key,\n        val: <S as StorageSchema>::Value,\n    ) -> ProtocolResult<()>;\n\n    async fn get<S: StorageSchema>(\n        &self,\n        key: <S as StorageSchema>::Key,\n    ) -> ProtocolResult<Option<<S as StorageSchema>::Value>>;\n\n    async fn remove<S: StorageSchema>(&self, key: <S as StorageSchema>::Key) -> ProtocolResult<()>;\n\n    async fn contains<S: StorageSchema>(\n        &self,\n        key: <S as StorageSchema>::Key,\n    ) -> ProtocolResult<bool>;\n\n    // TODO: Query struct?\n    fn iter<S: StorageSchema + 'static>(\n        &self,\n        keys: Vec<<S as StorageSchema>::Key>,\n    ) -> Box<dyn Stream<Item = ProtocolResult<Option<<S as StorageSchema>::Value>>>>;\n\n    async fn batch_modify<S: StorageSchema>(\n        &self,\n        keys: Vec<<S as StorageSchema>::Key>,\n        vals: Vec<StorageBatchModify<S>>,\n    ) -> ProtocolResult<()>;\n}\n`}</code></pre>\n    <p>{`Adapter 通过 Schema 和 Protocol Codec， 直接对应表的数据结构进行序列化和反序列化操作。Storage 层无需关心序列化和反序列操作，拿到的直接就是对应的数据结构。`}</p>\n    <p>{`使用 Stream 实现异步原生的遍历，批量读取操作。`}</p>\n    <p>{`BatchModify 则将插入和删除进行了整合，接口稍简洁干净一些。`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}