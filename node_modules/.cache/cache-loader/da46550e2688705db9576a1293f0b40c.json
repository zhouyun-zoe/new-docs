{"remainingRequest":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/babel-loader/lib/index.js??ref--7-1!/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--7-2!/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--7-3!/Users/Yun/Desktop/vdocs/website/new-docs/docs/service-list/auth-service.md","dependencies":[{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/docs/service-list/auth-service.md","mtime":1596436878693},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/.docusaurus/docusaurus-plugin-content-docs/site-docs-service-list-auth-service-md-6f3.json","mtime":1596430120240},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/cache-loader/dist/cjs.js","mtime":1588759099254},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/babel-loader/lib/index.js","mtime":1588759098876},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1588759134386},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1588759133114}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL1l1bi9EZXNrdG9wL3Zkb2NzL3dlYnNpdGUvbmV3LWRvY3Mvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMiO2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7ZXhwb3J0IGNvbnN0IGZyb250TWF0dGVyPXt0aXRsZTonQXV0aG9yaXphdGlvbiBTZXJ2aWNlJ307ZXhwb3J0IGNvbnN0IG1ldGFkYXRhPXsiaWQiOiJzZXJ2aWNlLWxpc3QvYXV0aC1zZXJ2aWNlIiwidGl0bGUiOiJBdXRob3JpemF0aW9uIFNlcnZpY2UiLCJkZXNjcmlwdGlvbiI6IiMg5qaC6L+wIiwic291cmNlIjoiQHNpdGUvZG9jcy9zZXJ2aWNlLWxpc3QvYXV0aC1zZXJ2aWNlLm1kIiwicGVybWFsaW5rIjoiL25ldy1kb2NzL2RvY3Mvc2VydmljZS1saXN0L2F1dGgtc2VydmljZSIsImVkaXRVcmwiOiJodHRwczovL2dpdGh1Yi5jb20vbmVydm9zbmV0d29yay9tdXRhL2VkaXQvbWFzdGVyL3dlYnNpdGUvZG9jcy9zZXJ2aWNlLWxpc3QvYXV0aC1zZXJ2aWNlLm1kIiwic2lkZWJhciI6ImRvY3MiLCJwcmV2aW91cyI6eyJ0aXRsZSI6IkFzc2V0IFNlcnZpY2UiLCJwZXJtYWxpbmsiOiIvbmV3LWRvY3MvZG9jcy9zZXJ2aWNlLWxpc3QvYXNzZXQtc2VydmljZSJ9LCJuZXh0Ijp7InRpdGxlIjoiTXVsdGktc2lnbmF0dXJlIFNlcnZpY2UiLCJwZXJtYWxpbmsiOiIvbmV3LWRvY3MvZG9jcy9zZXJ2aWNlLWxpc3QvbXVsdGktc2lnLXNlcnZpY2UifX07LyogQGpzeCBtZHggKi9leHBvcnQgY29uc3QgcmlnaHRUb2M9W3t2YWx1ZTon5YW35L2T6K6+6K6hJyxpZDon5YW35L2T6K6+6K6hJyxjaGlsZHJlbjpbXX0se3ZhbHVlOifliJ3lp4vljJYgQXV0aG9yaXphdGlvbiBTZXJ2aWNlJyxpZDon5Yid5aeL5YyWLWF1dGhvcml6YXRpb24tc2VydmljZScsY2hpbGRyZW46W119LHt2YWx1ZTon5a6e546wIGNoZWNrX2F1dGhvcml6YXRpb24nLGlkOiflrp7njrAtY2hlY2tfYXV0aG9yaXphdGlvbicsY2hpbGRyZW46W119XTtjb25zdCBtYWtlU2hvcnRjb2RlPW5hbWU9PmZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O2NvbnN0IGxheW91dFByb3BzPXtyaWdodFRvY307Y29uc3QgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KHtjb21wb25lbnRzLC4uLnByb3BzfSl7cmV0dXJuIG1keChNRFhMYXlvdXQsX2V4dGVuZHMoe30sbGF5b3V0UHJvcHMscHJvcHMse2NvbXBvbmVudHM6Y29tcG9uZW50cyxtZHhUeXBlOiJNRFhMYXlvdXQifSksbWR4KCJoMSIseyJpZCI6Iuamgui/sCJ9LGDmpoLov7BgKSxtZHgoInAiLG51bGwsYEF1dGhvcml6YXRpb24gU2VydmljZSDmmK/ooqvkuqTmmJPmsaDosIPnlKjvvIzlr7nkuqTmmJPov5vooYzmo4Dmn6XnmoQgc2VydmljZeOAgkF1dGhvcml6YXRpb24gU2VydmljZSDmnKzouqvkuI3mj5Dkvpvku7vkvZXnmoTmo4Dmn6XpgLvovpHvvIzogIzmmK/ljrvosIPnlKjms6jlhozlnKjlhbbkuK3nmoQgc2VydmljZSDlj4rlhbblr7nlupTnmoTmlrnms5Xov5vooYzmoKHpqozjgIJgKSxtZHgoImgyIix7ImlkIjoi5YW35L2T6K6+6K6hIn0sYOWFt+S9k+iuvuiuoWApLG1keCgicCIsbnVsbCxgQXV0aG9yaXphdGlvbiBTZXJ2aWNlIOeahOe7k+aehOWmguS4i+aJgOekuu+8mmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcnVzdCJ9KSxgcHViIHN0cnVjdCBBdXRob3JpemF0aW9uU2VydmljZTxTREs+IHsKICAgIHNkazogICAgICAgICAgU0RLLAogICAgdmVyaWZpZWRfbGlzdDogQm94PGR5biBTdG9yZUFycmF5PFN0cmluZywgU3RyaW5nPj4sCn0KYCkpLG1keCgicCIsbnVsbCxg5LuO57uT5p6E5Lit5Y+v5Lul55yL5Ye677yMQXV0aG9yaXphdGlvbiBTZXJ2aWNlIOS4u+imgeaYr+e7tOaKpOS6huS4gOS4qiBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgdmVyaWZpaWVkX2xpc3RgKSxg44CCCmAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGB2ZXJpZmllZF9saXN0YCksYCDmmK/kuIDkuKrvvIhzZXJ2aWNlIOWQjeWtlyDigJQg5pa55rOV5ZCN5a2X77yJ55qE5pWw57uE44CCYCksbWR4KCJwIixudWxsLG1keCgiaW1nIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsic3JjIjoiL3N0YXRpYy9kb2NzLWltZy9hdXRoLnN2ZyIsImFsdCI6ImF1dGgtc2VydmljZSJ9KSkpLG1keCgicCIsbnVsbCxg5aaC5LiK5Zu+5omA56S677yM5b2T5Lqk5piT5rGg5pS25Yiw5Lqk5piT55qE5pe25YCZ77yM5Lqk5piT5rGg5Lya6LCD55SoIEF1dGhvcml6YXRpb24gU2VydmljZe+8jOWwhuS6pOaYk+W6j+WIl+WMluS5i+WQjuWPkee7mSBBdXRob3JpemF0aW9uIFNlcnZpY2XjgIIK6L+Z5pe2IEF1dGhvcml6YXRpb24gU2VydmljZSDnmoQgY2hlY2tfYXV0aG9yaXphdGlvbiDmlrnms5XkvJrooqvosIPnlKjjgIIK5Zug5Li6IEF1dGhvcml6YXRpb24gU2VydmljZSDlubbkuI3muIXmpZrlhbbku5Ygc2VydmljZSDnmoTlrp7njrDvvIzmiYDku6Xms6jlhozov5vmnaXnmoTmlrnms5XnmoQgcGF5bG9hZCDpg73lj6rog73mjqXmlLYgYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYFNpZ25lZFRyYW5zYWN0aW9uYCksYCDluo/liJfljJbmiJDnmoQgSnNvbiDlrZfnrKbkuLLkvZzkuLrlj4LmlbDvvIzogIzov5Tlm57lgLzlv4XpobvmmK8gYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYFNlcnZpY2VSZXNwb25zZTwoKT5gKSxg44CCCuW9k+i/lOWbnue7k+aenOeahOiwg+eUqCBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgaXNfZXJyb3IoKWApLGAg5pa55rOV6L+U5Zue55yf55qE5pe25YCZ77yM5YiZ5Yik5a6a5Lqk5piT5LiN5ZCI5rOV44CC5rOo5YaM6L+bIEF1dGhvcml6YXRpb24gU2VydmljZSDnmoTmlrnms5Xlv4XpobvpgbXlvqrkuIrov7Dop4TojIPjgIJgKSxtZHgoImgyIix7ImlkIjoi5Yid5aeL5YyWLWF1dGhvcml6YXRpb24tc2VydmljZSJ9LGDliJ3lp4vljJYgQXV0aG9yaXphdGlvbiBTZXJ2aWNlYCksbWR4KCJwIixudWxsLGBBdXRob3JpemF0aW9uIFNlcnZpY2Ug55qE5Yid5aeL5YyW5bCx5ZKM5pmu6YCa55qEIFNlcnZpY2Ug5LiA5qC377yM6ZyA6KaB5ZyoIG5ldyDkuIDkuKrlrp7kvovnmoTml7blgJnvvIzlsIblhbbku5bnmoQgU2VydmljZSDkvp3otZbkvKDpgJLov5vljrvjgIJgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXJ1c3QifSksYHB1YiBmbiBuZXcoX3NkazogU0RLLCBtdWx0aV9zaWc6IE11bHRpU2lnbmF0dXJlU2VydmljZTxTREs+LCBhZG1pc3Npb25fY29udHJvbDogQUMpIC0+IFNlbGYgewogICAgICAgIFNlbGYgewogICAgICAgICAgICBfc2RrLAogICAgICAgICAgICBtdWx0aV9zaWcsCiAgICAgICAgICAgIGFkbWlzc2lvbl9jb250cm9sLAogICAgICAgIH0KICAgIH0KCmApKSxtZHgoImgyIix7ImlkIjoi5a6e546wLWNoZWNrX2F1dGhvcml6YXRpb24ifSxg5a6e546wIGNoZWNrX2F1dGhvcml6YXRpb25gKSxtZHgoInAiLG51bGwsYOagueaNruiHqui6q+eahOS4muWKoemAu+i+kemcgOaxgu+8jOWIm+W7uiBjaGVja19hdXRob3JpemF0aW9uIOWHveaVsO+8jOWunueOsOS7o+eggeWNs+WPr+OAgmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcnVzdCJ9KSxgI1tyZWFkXQogICAgZm4gY2hlY2tfYXV0aG9yaXphdGlvbigKICAgICAgICAmc2VsZiwKICAgICAgICBjdHg6IFNlcnZpY2VDb250ZXh0LAogICAgICAgIHBheWxvYWQ6IFNpZ25lZFRyYW5zYWN0aW9uLAogICAgKSAtPiBTZXJ2aWNlUmVzcG9uc2U8KCk+IHsKICAgICAgICBsZXQgcmVzcCA9IHNlbGYKICAgICAgICAgICAgLm11bHRpX3NpZwogICAgICAgICAgICAudmVyaWZ5X3NpZ25hdHVyZShjdHguY2xvbmUoKSwgcGF5bG9hZC5jbG9uZSgpKTsKICAgICAgICBpZiByZXNwLmlzX2Vycm9yKCkgewogICAgICAgICAgICByZXR1cm4gU2VydmljZVJlc3BvbnNlOjo8KCk+Ojpmcm9tX2Vycm9yKAogICAgICAgICAgICAgICAgMTAyLAogICAgICAgICAgICAgICAgZm9ybWF0ISgKICAgICAgICAgICAgICAgICAgICAidmVyaWZ5IHRyYW5zYWN0aW9uIHNpZ25hdHVyZSBlcnJvciB7Oj99IiwKICAgICAgICAgICAgICAgICAgICByZXNwLmVycm9yX21lc3NhZ2UKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICBpZiAhc2VsZi5hZG1pc3Npb25fY29udHJvbC5pc19hbGxvd2VkKCZjdHgsIHBheWxvYWQpIHsKICAgICAgICAgICAgcmV0dXJuIFNlcnZpY2VSZXNwb25zZTo6PCgpPjo6ZnJvbV9lcnJvcigKICAgICAgICAgICAgICAgIDEwMiwKICAgICAgICAgICAgICAgICJUaGUgdHJhbnNhY3Rpb24gaXMgbm90IGFsbG93ZWQiLnRvX293bmVkKCksCiAgICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICBTZXJ2aWNlUmVzcG9uc2U6OmZyb21fc3VjY2VlZCgoKSkKICAgIH0KYCkpKTt9O01EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},{"version":3,"sources":["/Users/Yun/Desktop/vdocs/website/new-docs/docs/service-list/auth-service.md"],"names":["React","mdx","frontMatter","title","metadata","rightToc","value","id","children","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["\n  import React from 'react';\n  import { mdx } from '@mdx-js/react';\n\n  export const frontMatter = {\n\ttitle: 'Authorization Service'\n};\nexport const metadata = {\n  \"id\": \"service-list/auth-service\",\n  \"title\": \"Authorization Service\",\n  \"description\": \"# 概述\",\n  \"source\": \"@site/docs/service-list/auth-service.md\",\n  \"permalink\": \"/new-docs/docs/service-list/auth-service\",\n  \"editUrl\": \"https://github.com/nervosnetwork/muta/edit/master/website/docs/service-list/auth-service.md\",\n  \"sidebar\": \"docs\",\n  \"previous\": {\n    \"title\": \"Asset Service\",\n    \"permalink\": \"/new-docs/docs/service-list/asset-service\"\n  },\n  \"next\": {\n    \"title\": \"Multi-signature Service\",\n    \"permalink\": \"/new-docs/docs/service-list/multi-sig-service\"\n  }\n};\n  /* @jsx mdx */\n\nexport const rightToc = [{\n  value: '具体设计',\n  id: '具体设计',\n  children: []\n}, {\n  value: '初始化 Authorization Service',\n  id: '初始化-authorization-service',\n  children: []\n}, {\n  value: '实现 check_authorization',\n  id: '实现-check_authorization',\n  children: []\n}];\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  rightToc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"概述\"\n    }}>{`概述`}</h1>\n    <p>{`Authorization Service 是被交易池调用，对交易进行检查的 service。Authorization Service 本身不提供任何的检查逻辑，而是去调用注册在其中的 service 及其对应的方法进行校验。`}</p>\n    <h2 {...{\n      \"id\": \"具体设计\"\n    }}>{`具体设计`}</h2>\n    <p>{`Authorization Service 的结构如下所示：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`pub struct AuthorizationService<SDK> {\n    sdk:          SDK,\n    verified_list: Box<dyn StoreArray<String, String>>,\n}\n`}</code></pre>\n    <p>{`从结构中可以看出，Authorization Service 主要是维护了一个 `}<inlineCode parentName=\"p\">{`verifiied_list`}</inlineCode>{`。\n`}<inlineCode parentName=\"p\">{`verified_list`}</inlineCode>{` 是一个（service 名字 — 方法名字）的数组。`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/static/docs-img/auth.svg\",\n        \"alt\": \"auth-service\"\n      }}></img></p>\n    <p>{`如上图所示，当交易池收到交易的时候，交易池会调用 Authorization Service，将交易序列化之后发给 Authorization Service。\n这时 Authorization Service 的 check_authorization 方法会被调用。\n因为 Authorization Service 并不清楚其他 service 的实现，所以注册进来的方法的 payload 都只能接收 `}<inlineCode parentName=\"p\">{`SignedTransaction`}</inlineCode>{` 序列化成的 Json 字符串作为参数，而返回值必须是 `}<inlineCode parentName=\"p\">{`ServiceResponse<()>`}</inlineCode>{`。\n当返回结果的调用 `}<inlineCode parentName=\"p\">{`is_error()`}</inlineCode>{` 方法返回真的时候，则判定交易不合法。注册进 Authorization Service 的方法必须遵循上述规范。`}</p>\n    <h2 {...{\n      \"id\": \"初始化-authorization-service\"\n    }}>{`初始化 Authorization Service`}</h2>\n    <p>{`Authorization Service 的初始化就和普通的 Service 一样，需要在 new 一个实例的时候，将其他的 Service 依赖传递进去。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`pub fn new(_sdk: SDK, multi_sig: MultiSignatureService<SDK>, admission_control: AC) -> Self {\n        Self {\n            _sdk,\n            multi_sig,\n            admission_control,\n        }\n    }\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"实现-check_authorization\"\n    }}>{`实现 check_authorization`}</h2>\n    <p>{`根据自身的业务逻辑需求，创建 check_authorization 函数，实现代码即可。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`#[read]\n    fn check_authorization(\n        &self,\n        ctx: ServiceContext,\n        payload: SignedTransaction,\n    ) -> ServiceResponse<()> {\n        let resp = self\n            .multi_sig\n            .verify_signature(ctx.clone(), payload.clone());\n        if resp.is_error() {\n            return ServiceResponse::<()>::from_error(\n                102,\n                format!(\n                    \"verify transaction signature error {:?}\",\n                    resp.error_message\n                ),\n            );\n        }\n\n        if !self.admission_control.is_allowed(&ctx, payload) {\n            return ServiceResponse::<()>::from_error(\n                102,\n                \"The transaction is not allowed\".to_owned(),\n            );\n        }\n\n        ServiceResponse::from_succeed(())\n    }\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}