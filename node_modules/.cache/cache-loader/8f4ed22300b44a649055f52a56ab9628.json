{"remainingRequest":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/babel-loader/lib/index.js??ref--9-1!/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--9-2!/Users/Yun/Desktop/vdocs/website/new-docs/plugins/guides/markdownLoader.js??ref--9-3!/Users/Yun/Desktop/vdocs/website/new-docs/guides/getting-started/structuring.md","dependencies":[{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/guides/getting-started/structuring.md","mtime":1595397619914},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/.docusaurus/guides/site-guides-getting-started-structuring-md-20b.json","mtime":1595931366424},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/cache-loader/dist/cjs.js","mtime":1588759099254},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/babel-loader/lib/index.js","mtime":1588759098876},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1588759134386},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/plugins/guides/markdownLoader.js","mtime":1594780808724}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}