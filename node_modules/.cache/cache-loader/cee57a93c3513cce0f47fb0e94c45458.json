{"remainingRequest":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/babel-loader/lib/index.js??ref--7-1!/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--7-2!/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--7-3!/Users/Yun/Desktop/vdocs/website/new-docs/docs/dev/service-dev.md","dependencies":[{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/docs/dev/service-dev.md","mtime":1596436924078},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/.docusaurus/docusaurus-plugin-content-docs/site-docs-dev-service-dev-md-0af.json","mtime":1596436924442},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/cache-loader/dist/cjs.js","mtime":1588759099254},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/babel-loader/lib/index.js","mtime":1588759098876},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1588759134386},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1588759133114}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/Yun/Desktop/vdocs/website/new-docs/docs/dev/service-dev.md"],"names":["React","mdx","frontMatter","title","metadata","rightToc","value","id","children","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["\n  import React from 'react';\n  import { mdx } from '@mdx-js/react';\n\n  export const frontMatter = {\n\ttitle: 'Service Development Guide'\n};\nexport const metadata = {\n  \"id\": \"dev/service-dev\",\n  \"title\": \"Service Development Guide\",\n  \"description\": \"区块链作为一种新的分布式应用，可以简单的理解成一个副本状态机，同时使用密码学做到应用数据的可验证和防篡改。一方面，多个副本的通信和一致性，由 P2P 网络、交易池和共识组件等共同完成，这些组件也是区块链架构中的底层模块，一般很少变动，所以可以固化到框架中直接提供给开发者使用。另一方面，状态机部分往往与链的具体需求和业务相关，需要由开发者进行自定义，框架提供 SDK 来让减轻这部分工作的时间成本和技术复杂度。\",\n  \"source\": \"@site/docs/dev/service-dev.md\",\n  \"permalink\": \"/new-docs/docs/dev/service-dev\",\n  \"editUrl\": \"https://github.com/nervosnetwork/muta/edit/master/website/docs/dev/service-dev.md\",\n  \"sidebar\": \"docs\",\n  \"previous\": {\n    \"title\": \"Development Overview\",\n    \"permalink\": \"/new-docs/docs/dev/dev-overview\"\n  },\n  \"next\": {\n    \"title\": \"Service List\",\n    \"permalink\": \"/new-docs/docs/service-list/service-overview\"\n  }\n};\n  /* @jsx mdx */\n\nexport const rightToc = [{\n  value: '开发范式',\n  id: '开发范式',\n  children: []\n}, {\n  value: '状态存储',\n  id: '状态存储',\n  children: []\n}, {\n  value: '接口方法',\n  id: '接口方法',\n  children: []\n}, {\n  value: '返回值和错误处理',\n  id: '返回值和错误处理',\n  children: []\n}, {\n  value: '创世配置',\n  id: '创世配置',\n  children: []\n}, {\n  value: '资源消耗统计：cycle',\n  id: '资源消耗统计：cycle',\n  children: []\n}, {\n  value: '事件',\n  id: '事件',\n  children: []\n}, {\n  value: 'ServiceContext 中的其他方法',\n  id: 'servicecontext-中的其他方法',\n  children: []\n}, {\n  value: 'Service 调用',\n  id: 'service-调用',\n  children: []\n}, {\n  value: 'Hook',\n  id: 'hook',\n  children: []\n}, {\n  value: 'Tx Hook',\n  id: 'tx-hook',\n  children: []\n}, {\n  value: '序列化',\n  id: '序列化',\n  children: [{\n    value: 'Json',\n    id: 'json',\n    children: []\n  }, {\n    value: 'RLP',\n    id: 'rlp',\n    children: []\n  }]\n}, {\n  value: '构造方法',\n  id: '构造方法',\n  children: []\n}, {\n  value: '初始化&amp;注册 Service',\n  id: '初始化注册-service',\n  children: []\n}, {\n  value: 'Service 示例',\n  id: 'service-示例',\n  children: []\n}, {\n  value: '下一站',\n  id: '下一站',\n  children: []\n}];\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  rightToc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <p>{`区块链作为一种新的分布式应用，可以简单的理解成一个副本状态机，同时使用密码学做到应用数据的可验证和防篡改。一方面，多个副本的通信和一致性，由 P2P 网络、交易池和共识组件等共同完成，这些组件也是区块链架构中的底层模块，一般很少变动，所以可以固化到框架中直接提供给开发者使用。另一方面，状态机部分往往与链的具体需求和业务相关，需要由开发者进行自定义，框架提供 SDK 来让减轻这部分工作的时间成本和技术复杂度。`}</p>\n    <p>{`Muta 框架将用户自定义部分抽象成一个 Service，同时提供 `}<inlineCode parentName=\"p\">{`ServiceSDK`}</inlineCode>{` 让 Service 开发变得简单和高效。每个 Service 完成一个相对独立的功能，单独维护自己的存储和操作接口，类似一个运行在沙盒里的小型状态机。开发者可以使用 Service 开发链的治理模块、业务逻辑，甚至是将虚拟机接入区块链。除了开发自己的 Service，你也可以复用他人已经开发好的 Service，未来 Muta 框架会提供许多常见功能的 Service，如 Asset、Risc-V 虚拟机、DPoS、多签治理等等。Service 之间可以互相调用，这些 Service 共同组成了链的状态机部分，通过框架接口将状态机接入区块链底层组件，一条专属你的全新链就开发完成啦。`}</p>\n    <p>{`换句话说，使用 Muta 框架开发你自己的区块链只需 3 步：`}</p>\n    <ol>\n      <li parentName=\"ol\">{`思考自己链的专属需求，确定需要哪些 Service`}</li>\n      <li parentName=\"ol\">{`如果需要的 Service 有现成的，可以直接复用；如果没有，可以自己开发`}</li>\n      <li parentName=\"ol\">{`将这些 Service 接入框架，编译运行！`}</li>\n    </ol>\n    <p>{`这篇文章主要介绍 Service 的组成和开发指南。在熟悉 Service 之后，可以阅读 `}<a parentName=\"p\" {...{\n        \"href\": \"/new-docs/docs/dev/dex\"\n      }}>{`开发一条 Dex 专有链`}</a>{`，学习如何使用 Muta 框架从零开发一条区块链。\n参考代码在： `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/nervosnetwork/muta-tutorial-dex\"\n      }}>{`dex`}</a>{`。`}</p>\n    <h2 {...{\n      \"id\": \"开发范式\"\n    }}>{`开发范式`}</h2>\n    <p>{`在设计 Service 时，我们希望降低开发者的开发门槛，让更多对区块链不那么熟悉的开发者也可以快速上手，开发自己的区块链。在开发体验上，我们希望向开发合约的体验靠拢，如果你已经学会了如何开发合约，那么恭喜你，你也已经学会了如何开发 Service。在开发范式上，我们把 Service 抽象成一个小型状态机，Service 包含普通状态机所拥有的组件：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`状态（存储）`}</li>\n      <li parentName=\"ul\">{`输入（接口）`}</li>\n      <li parentName=\"ul\">{`函数（逻辑）`}</li>\n      <li parentName=\"ul\">{`输出（返回值）`}</li>\n      <li parentName=\"ul\">{`异常和错误处理`}</li>\n    </ul>\n    <p>{`同时也包含区块链特有的一些组件：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`创世块配置`}</li>\n      <li parentName=\"ul\">{`事件`}</li>\n      <li parentName=\"ul\">{`资源消耗统计（Cycle）`}</li>\n      <li parentName=\"ul\">{`与区块链相关的钩子函数`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`hook_before`}</inlineCode>{` 和 `}<inlineCode parentName=\"li\">{`hook_after`}</inlineCode>{` 在一个区块执行前/后调用的函数`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`tx_hook_before`}</inlineCode>{` 和 `}<inlineCode parentName=\"li\">{`tx_hook_after`}</inlineCode>{` 在每一个 tx 前/后调用的函数`}</li>\n    </ul>\n    <p>{`接下来我们分别介绍每个组件。`}</p>\n    <h2 {...{\n      \"id\": \"状态存储\"\n    }}>{`状态存储`}</h2>\n    <p>{`区别于普通程序的存储，区块链的存储需要使用密码学保证数据的可验证和防篡改。`}<inlineCode parentName=\"p\">{`ServiceSDK`}</inlineCode>{` 提供了一些数据类型和接口，让开发者无需关心密码学相关的部分，可以像开发普通程序一样完成状态的存储。`}</p>\n    <p><inlineCode parentName=\"p\">{`ServiceSDK`}</inlineCode>{` 提供了两类存储接口，一类是获得常见数据类型 map、array、uint64、String、Bool 的接口，使用这些数据类型的数据会自动存入区块链的世界状态中。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`pub trait ServiceSDK {\n    // Alloc or recover a \\`Map\\` by\\` var_name\\`\n    fn alloc_or_recover_map<\n        Key: 'static + Send + FixedCodec + Clone + PartialEq,\n        Val: 'static + FixedCodec,\n    >(\n        &mut self,\n        var_name: &str,\n    ) -> Box<dyn StoreMap<Key, Val>>;\n\n    // Alloc or recover a \\`Array\\` by\\` var_name\\`\n    fn alloc_or_recover_array<Elm: 'static + FixedCodec>(\n        &mut self,\n        var_name: &str,\n    ) -> Box<dyn StoreArray<Elm>>;\n\n    // Alloc or recover a \\`Uint64\\` by\\` var_name\\`\n    fn alloc_or_recover_uint64(&mut self, var_name: &str) -> Box<dyn StoreUint64>;\n\n    // Alloc or recover a \\`String\\` by\\` var_name\\`\n    fn alloc_or_recover_string(&mut self, var_name: &str) -> Box<dyn StoreString>;\n\n    // Alloc or recover a \\`Bool\\` by\\` var_name\\`\n    fn alloc_or_recover_bool(&mut self, var_name: &str) -> Box<dyn StoreBool>;\n\n    // more functions are hidden\n}\n`}</code></pre>\n    <p>{`如果这些数据类型不能满足你的需求，还有一类 key-value 接口：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`pub trait ServiceSDK {\n    \n    // Get a value from the service state by key\n    fn get_value<Key: FixedCodec, Ret: FixedCodec>(&self, key: &Key) -> Option<Ret>;\n\n    // Set a value to the service state by key\n    fn set_value<Key: FixedCodec, Val: FixedCodec>(&mut self, key: Key, val: Val);\n\n    // more functions are hidden\n}\n`}</code></pre>\n    <p>{`更有 get/set_account_value 这样便捷的方法。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`pub trait ServiceSDK {\n    \n    // Get a value from the specified address by key\n    fn get_account_value<Key: FixedCodec, Ret: FixedCodec>(\n        &self,\n        address: &Address,\n        key: &Key,\n    ) -> Option<Ret>;\n\n    // Insert a pair of key / value to the specified address\n    fn set_account_value<Key: FixedCodec, Val: FixedCodec>(\n        &mut self,\n        address: &Address,\n        key: Key,\n        val: Val,\n    );\n\n    // more functions are hidden\n}\n`}</code></pre>\n    <p>{`使用这类接口的数据也会自动存储在世界状态中。`}</p>\n    <p>{`你需要使用结构体来封装 Service，以 Dex Service 为例：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`// A dex service\npub struct DexService<SDK: ServiceSDK, A> {\n    _sdk: SDK,\n    trades: Box<dyn StoreMap<Hash, Trade>>,\n    buy_orders: Box<dyn StoreMap<Hash, Order>>,\n    sell_orders: Box<dyn StoreMap<Hash, Order>>,\n    history_orders: Box<dyn StoreMap<Hash, Order>>,\n    validity: Box<dyn StoreUint64>,\n    // 这里的 asset 是依赖另一个 AssetService 的服务，A 是她的 trait type param\n    asset: A,\n}\n`}</code></pre>\n    <p>{`此外，Service 的结构体中需要包含实现 `}<inlineCode parentName=\"p\">{`ServiceSDK`}</inlineCode>{` trait 的数据类型，通过该类型获得 ServiceSDK 提供的能力。`}</p>\n    <h2 {...{\n      \"id\": \"接口方法\"\n    }}>{`接口方法`}</h2>\n    <p>{`Service 通过过程宏标记方法，来提供链外可以调用的接口。`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`调用其他 Service 的接口，必须声明其他接口的 trait(推荐)， 然后在注册 Service 的时候，通过适当的方法将其他 Service 的实例传入。之后会说明。`}</p>\n    </blockquote>\n    <p>{`以 Dex Service 为例：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`#[service]\nimpl<SDK: 'static + ServiceSDK> DexService<SDK> {\n   #[cycles(210_00)]\n   #[write]\n   fn add_trade(&mut self, ctx: ServiceContext, payload: AddTradePayload) -> ServiceResponse<()>;\n\n  #[read]\n  fn get_trades(&self, _ctx: ServiceContext) -> ServiceResponse<GetTradesResponse>;\n\n}\n`}</code></pre>\n    <p>{`给 Service 结构体绑定方法的 `}<inlineCode parentName=\"p\">{`impl`}</inlineCode>{` 块中，需要标记 `}<inlineCode parentName=\"p\">{`#[service]`}</inlineCode>{` 过程宏，该过程宏会给 Service 自动实现 `}<inlineCode parentName=\"p\">{`Service`}</inlineCode>{` trait，框架通过该 trait 和 Service 交互。`}</p>\n    <p>{`Dex Service 中定义了增加交易对和读取交易对两个接口方法，标记了 `}<inlineCode parentName=\"p\">{`#[write]`}</inlineCode>{` 的为写方法，该方法可以改变 Service 状态；标记了 `}<inlineCode parentName=\"p\">{`#[read]`}</inlineCode>{` 的为读方法，该方法不能改变 Service 状态；`}</p>\n    <p>{`方法的第二个参数`}<strong parentName=\"p\">{`必须`}</strong>{`为 `}<inlineCode parentName=\"p\">{`ServiceContext`}</inlineCode>{` 类型，该类型负责管理交易执行的上下文；`}</p>\n    <p>{`方法的第三个参数是`}<strong parentName=\"p\">{`可选`}</strong>{`的，定义接口的输入参数，同时需要为该类型实现序列化 trait，目前框架使用的是 `}<strong parentName=\"p\">{`json`}</strong>{` 序列化方案：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`#[derive(Deserialize, Serialize, Clone, Debug, PartialEq, Eq)]\npub struct AddTradePayload {\n    pub base_asset: Hash,\n    pub counter_party: Hash,\n}\n`}</code></pre>\n    <p>{`接口方法最多只能有这 3 个参数。`}</p>\n    <h2 {...{\n      \"id\": \"返回值和错误处理\"\n    }}>{`返回值和错误处理`}</h2>\n    <p>{`接口方法的返回值统一为 `}<inlineCode parentName=\"p\">{`ServiceResponse<T>`}</inlineCode>{` 类型：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`#[derive(Debug, Clone, Default)]\npub struct ServiceResponse<T: Default> {\n    pub code:          u64,\n    pub succeed_data:  T,\n    pub error_message: String,\n}\n`}</code></pre>\n    <p>{`对于正确的数据返回，只需将数据通过 ServiceResponse.from_succeed(succeed_data: T) 即可创建 ServiceResponse`}</p>\n    <p>{`对于错误返回，推荐每个 Service 定义自己的错误类型，然后通过ServiceResponsef.from_error(code: u64, error_message: String)，创建 ServiceResponse。以 Dex Service 为例`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`\n#[derive(Debug, Display)]\npub enum DexError {\n    #[display(fmt = \"Parsing payload to json failed {:?}\", _0)]\n    JsonParse(serde_json::Error),\n\n    IllegalTrade,\n\n    TradeExisted,\n\n    TradeNotExisted,\n\n    OrderOverdue,\n\n    OrderNotExisted,\n}\n\nimpl DexError {\n    fn code(&self) -> u64 {\n        match self {\n            DexError::JsonParse(_) => 201,\n            DexError::IllegalTrade { .. } => 202,\n            DexError::TradeExisted { .. } => 203,\n            DexError::TradeNotExisted { .. } => 204,\n            DexError::OrderOverdue => 205,\n            DexError::OrderNotExisted => 206,\n        }\n    }\n}\n\nimpl<T: Default> From<DexError> for ServiceResponse<T> {\n    fn from(err: DexError) -> ServiceResponse<T> {\n        ServiceResponse::from_error(err.code(), err.to_string())\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"创世配置\"\n    }}>{`创世配置`}</h2>\n    <p>{`如果创世块的世界状态需要包含 Service 的初始状态，可以在 Service 中通过过程宏`}<inlineCode parentName=\"p\">{`#[genesis]`}</inlineCode>{` 标注的 `}<inlineCode parentName=\"p\">{`fn init_genesis`}</inlineCode>{` 方法来完成。框架在创建创世块时，会调用 Service 中标注了 `}<inlineCode parentName=\"p\">{`#[genesis]`}</inlineCode>{` 的方法来完成初始化，该函数最多只有一个。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`#[genesis]\n    fn init_genesis(&mut self, payload: InitGenesisPayload) {\n        assert!(self.profits.is_empty());\n\n        let mut info = payload.info;\n        info.tx_fee_discount.sort();\n        self.sdk.set_value(INFO_KEY.to_string(), info);\n        self.sdk.set_value(\n            MINER_PROFIT_OUTLET_KEY.to_string(),\n            payload.miner_profit_outlet_address,\n        );\n\n        for miner in payload.miner_charge_map.into_iter() {\n            self.miners\n                .insert(miner.address, miner.miner_charge_address);\n        }\n    }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"资源消耗统计：cycle\"\n    }}>{`资源消耗统计：cycle`}</h2>\n    <p>{`接口方法中使用 `}<inlineCode parentName=\"p\">{`ServiceContext`}</inlineCode>{` 的 `}<inlineCode parentName=\"p\">{`fn sub_cycles`}</inlineCode>{` 接口，可以消耗一定数量的 cycles ，接口如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`pub fn sub_cycles(&self, cycles: u64) -> bool\n`}</code></pre>\n    <p>{`此外，如果接口方法消耗的 cycles 是固定数量，可以使用过程宏 `}<inlineCode parentName=\"p\">{`#[cycles(amount)]`}</inlineCode>{` 标记接口方法，框架会自动扣除 `}<inlineCode parentName=\"p\">{`amount`}</inlineCode>{` 数量的 cycles 。例如，创建资产方法消耗固定 210_00 数量的 cycles: `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`#[cycles(210_00)]\n    #[write]\n    fn create_asset(\n        &mut self,\n        ctx: ServiceContext,\n        payload: CreateAssetPayload,\n    ) -> ServiceResponse<Asset> ;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"事件\"\n    }}>{`事件`}</h2>\n    <p>{`使用 `}<inlineCode parentName=\"p\">{`ServiceContext`}</inlineCode>{` 的 `}<inlineCode parentName=\"p\">{`fn emit_event`}</inlineCode>{` 接口，可以向链外抛出事件信息。 name 类似于 topic， message 则是信息：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`pub fn emit_event(&self, name: String, message: String) {\n        self.events.borrow_mut().push(Event {\n            service: self.service_name.clone(),\n            name,\n            data: message,\n        })\n    }；\n`}</code></pre>\n    <p>{`抛出的事件 message 为 json 序列化的字符串，以 Asset Service 为例：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`macro_rules! serde_json_string {\n    ($payload: expr) => {\n        match serde_json::to_string(&$payload).map_err(AssetError::JsonParse) {\n            Ok(s) => s,\n            Err(e) => return e.into(),\n        };\n    };\n}\n\n\nlet event_json = serde_json_string!(event);\nctx.emit_event(\"TransferAsset\".to_owned(), event_json);\nServiceResponse::from_succeed(())\n`}</code></pre>\n    <p>{`这段代码使用到了一个在 Asset Service 内自定义的宏 serde_json_string。\n该宏只是简单地将传入的数据 json stringfy 成字符串返回，或者当 json stringfy 出错的时候，直接在当前方法下 return AssetError::JsonParse 的错误。`}</p>\n    <h2 {...{\n      \"id\": \"servicecontext-中的其他方法\"\n    }}>{`ServiceContext 中的其他方法`}</h2>\n    <p>{`ServiceContext 维护交易执行的上下文，通过 ServiceContext 可以获取的信息有：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`// 获取交易哈希\npub fn get_tx_hash(&self) -> Option<Hash>;\n\n// 获取 nonce\npub fn get_nonce(&self) -> Option<Hash>;\n\n// 获取 cycle 价格\npub fn get_cycles_price(&self) -> u64；\n\n// 获取  cycle limit\npub fn get_cycles_limit(&self) -> u64；\n\n// 获取已消耗 cycles 数量\npub fn get_cycles_used(&self) -> u64；\n\n// 获取交易发起方地址\npub fn get_caller(&self) -> Address；\n\n// 获取交易所在区块高度\npub fn get_current_height(&self) -> u64；\n\n// 获取额外信息\npub fn get_extra(&self) -> Option<Bytes>；\n\n// 获取当前区块时间戳\npub fn get_timestamp(&self) -> u64；\n\n// 获得已经事件信息\npub fn get_events(&self) -> Vec<Event>；\n\n// 获得 tx 调用的 service name\npub fn get_service_name(&self) -> &str;\n\n// 获得 tx 调用的 method name\npub fn get_service_method(&self) -> &str;\n\n// 获得 tx 调用的 payload\npub fn get_payload(&self) -> &str;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"service-调用\"\n    }}>{`Service 调用`}</h2>\n    <p>{`一个 Service 调用另一个 Service，等同于一个 Rust function 中调用另一个 funtion。\n例如在 Dex Service 中调用 Asset Service，只需要通过 Dex Service 自身的 asset 变量，就可以访问 Asset Service了。\nTrait bound A 推荐是 Asset Service 对其他 Service 暴露出来的方法。`}</p>\n    <p>{`该 asset 属性需要在构造 DexService 的时候传入。之后我们会讲到。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`\npub struct DexService<SDK: ServiceSDK, A> {\n    _sdk: SDK,\n    trades: Box<dyn StoreMap<Hash, Trade>>,\n    buy_orders: Box<dyn StoreMap<Hash, Order>>,\n    sell_orders: Box<dyn StoreMap<Hash, Order>>,\n    history_orders: Box<dyn StoreMap<Hash, Order>>,\n    validity: Box<dyn StoreUint64>,\n    asset: A,\n}\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"hook\"\n    }}>{`Hook`}</h2>\n    <p>{`每个 block 执行前后，框架会分别调用 Service 的 hook_before、hook_after 方法, 这两个方法需分别使用 `}<inlineCode parentName=\"p\">{`#[hook_before]`}</inlineCode>{`、`}<inlineCode parentName=\"p\">{`#[hook_after]`}</inlineCode>{` 过程宏标记。\nService 可借助 hook 功能完成特定逻辑，如 DPoS Service 可在 hook_after 方法中统计候选验证人抵押 token 数量，进行验证人变更等操作；Dex Service 可在 hook_after 方法中对订单进行匹配和成交操作：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`// Hook method in dex service\n#[hook_after]\n    fn match_and_deal(&mut self, params: &ExecutorParams)；\n`}</code></pre>\n    <p>{`注意，hook_before 和 hook_after 不允许返回任何数据类型。这意味着他们没有`}<strong parentName=\"p\">{`错误`}</strong>{`一说。开发者必须在方法内妥善处理可能遇到的业务异常，`}<strong parentName=\"p\">{`切不可抛出 panic`}</strong>{`。`}</p>\n    <h2 {...{\n      \"id\": \"tx-hook\"\n    }}>{`Tx Hook`}</h2>\n    <p>{`在每笔交易执行的前后，框架还会调用 Service 的 tx_hook_before、tx_hook_after 方法，这两个方法需分别使用 `}<inlineCode parentName=\"p\">{`#[tx_hook_before]`}</inlineCode>{`、`}<inlineCode parentName=\"p\">{`#[tx_hook_after]`}</inlineCode>{` 过程宏标记。\nService 可借助 tx hook 完成针对交易的特定逻辑，比如验证交易的发起人是否满足特定的条件，若不满足，可直接终止该交易的执行。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`// Tx hook method\n#[tx_hook_before]\nfn check_balance(&self, ctx: ServiceContext) -> ServiceResponse<()> {\n    let caller = ctx.get_caller();\n    // Check caller balance...\n    // if caller.balance < xxx {\n    //     ctx.cancel(\"abort tx\".to_owned())\n    // }\n}\n`}</code></pre>\n    <p>{`tx_hook_before 和 tx_hook_after 可以返回错误。`}</p>\n    <ol>\n      <li parentName=\"ol\">{`无论 tx_hook_before 执行的结果是失败还是成功，tx_hook_before 所造成的改动，包括 state 和 event，都将被保留。`}</li>\n      <li parentName=\"ol\">{`如果 tx_hook_before 返回了错误，那么 tx 的逻辑将被跳过。`}</li>\n      <li parentName=\"ol\">{`如果 tx_hook_after 执行成功，那么 tx 的改动 和 tx_hook_after 的改动，都将被保留。`}</li>\n      <li parentName=\"ol\">{`如果 tx_hook_after 执行失败，那么 tx 的改动 和 tx_hook_after 的改动，都将被遗弃。`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"序列化\"\n    }}>{`序列化`}</h2>\n    <p>{`Service 主要使用两种序列化方案: Json 和 `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/ethereum/wiki/wiki/RLP\"\n      }}>{`RLP`}</a>{`;`}</p>\n    <h3 {...{\n      \"id\": \"json\"\n    }}>{`Json`}</h3>\n    <p>{`用户发送交易和返回结果，均使用 json 序列化，因此接口方法的输入参数中的 `}<inlineCode parentName=\"p\">{`payload`}</inlineCode>{` 和返回值 `}<inlineCode parentName=\"p\">{`ServiceResponse<_>`}</inlineCode>{` 中的 `}<inlineCode parentName=\"p\">{`Response`}</inlineCode>{` 都需要实现 json 序列化的 trait。以 `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mkxbl/muta-tutorial-dex/tree/master/services/asset\"\n      }}>{`Asset Service`}</a>{` 的 `}<inlineCode parentName=\"p\">{`fn create_asset`}</inlineCode>{` 接口方法为例：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`// 接口方法\n#[cycles(210_00)]\n#[write]\nfn create_asset(\n        &mut self,\n        ctx: ServiceContext,\n        payload: CreateAssetPayload,\n    ) -> ServiceResponse<Asset>;\n\n// 标记 #[derive(Deserialize, Serialize)] 以实现 json 序列化\n#[derive(Deserialize, Serialize, Clone, Debug)]\npub struct CreateAssetPayload {\n    pub name:   String,\n    pub symbol: String,\n    pub supply: u64,\n}\n// 标记 #[derive(Deserialize, Serialize)] 以实现 json 序列化\n#[derive(Deserialize, Serialize, Clone, Debug)]\npub struct Asset {\n    pub id:     Hash,\n    pub name:   String,\n    pub symbol: String,\n    pub supply: u64,\n    pub issuer: Address,\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"rlp\"\n    }}>{`RLP`}</h3>\n    <p>{`对于存储到世界状态的数据结构，为了保证序列化的一致性，该数据结构需要实现 `}<inlineCode parentName=\"p\">{`trait FixedCodec`}</inlineCode>{`，我们默认使用 RLP 方案来实现该 trait 。以 `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mkxbl/muta-tutorial-dex/tree/master/services/asset\"\n      }}>{`Asset Service`}</a>{` 为例：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`// Asset 需要存入世界状态 \npub struct AssetService<SDK> {\n    // 省略其他\n    assets: Box<dyn StoreMap<Hash, Asset>>,\n}\n\npub trait FixedCodec: Sized {\n    fn encode_fixed(&self) -> ProtocolResult<Bytes>;\n    fn decode_fixed(bytes: Bytes) -> ProtocolResult<Self>;\n}\n\n// 对 Asset 实现 trait FixedCodec\nimpl FixedCodec for Asset {\n    fn encode_fixed(&self) -> ProtocolResult<Bytes> {\n        Ok(Bytes::from(rlp::encode(self)))\n    }\n\n    fn decode_fixed(bytes: Bytes) -> ProtocolResult<Self> {\n        Ok(rlp::decode(bytes.as_ref()).map_err(FixedCodecError::from)?)\n    }\n}\n// 对 Asset 实现 RLP 反序列化方案\nimpl rlp::Decodable for Asset {\n    fn decode(rlp: &rlp::Rlp) -> Result<Self, rlp::DecoderError> {\n        Ok(Self {\n            id:     rlp.at(0)?.as_val()?,\n            name:   rlp.at(1)?.as_val()?,\n            symbol: rlp.at(2)?.as_val()?,\n            supply: rlp.at(3)?.as_val()?,\n            issuer: rlp.at(4)?.as_val()?,\n        })\n    }\n}\n// 对 Asset 实现 RLP 序列化方案\nimpl rlp::Encodable for Asset {\n    fn rlp_append(&self, s: &mut rlp::RlpStream) {\n        s.begin_list(5)\n            .append(&self.id)\n            .append(&self.name)\n            .append(&self.symbol)\n            .append(&self.supply)\n            .append(&self.issuer);\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"构造方法\"\n    }}>{`构造方法`}</h2>\n    <p>{`构造方法返回 Service 实例，以 Asset Service 为例：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`#[service]\nimpl<SDK: ServiceSDK> AssetService<SDK> {\n    pub fn new(mut sdk: SDK) -> Self {\n        let assets: Box<dyn StoreMap<Hash, Asset>> = sdk.alloc_or_recover_map(ASSETS_KEY);\n\n        Self { sdk, assets }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"初始化注册-service\"\n    }}>{`初始化&注册 Service`}</h2>\n    <p>{`DefaultServiceMapping 类负责向 Muta 注册 Service。\n1. 将要注册的 Service 手动添加到 list_service_name 方法的列表中。\n2. 通过 SDKFactory，获得，获得对应 Service 的 ServiceSDK，ServiceSDK的作用见上文。\n3. 如果一个 Service 依赖其他的 Service，先将其他 Service 构造出来。\n4. 如果有循环依赖，可以先完成构造，最后设置依赖。`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`例子中的 new_dex，就是先获取 AssetService 的实例，然后再初始化 DexService 自身`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`\nimpl ServiceMapping for DefaultServiceMapping {\n    fn get_service<SDK: 'static + ServiceSDK, Factory: SDKFactory<SDK>>(\n        &self,\n        name: &str,\n        factory: &Factory,\n    ) -> ProtocolResult<Box<dyn Service>> {\n        let service = match name {\n            \"asset\" => Box::new(Self::new_asset(factory)?) as Box<dyn Service>,\n            \"metadata\" => Box::new(Self::new_metadata(factory)?) as Box<dyn Service>,\n            \"dex\" => Box::new(Self::new_dex(factory)?) as Box<dyn Service>,\n            _ => panic!(\"not found service\"),\n        };\n\n        Ok(service)\n    }\n\n    fn list_service_name(&self) -> Vec<String> {\n        vec![\"asset\".to_owned(), \"metadata\".to_owned(), \"dex\".to_owned()]\n    }\n}\n\nimpl DefaultServiceMapping {\n    fn new_asset<SDK: 'static + ServiceSDK, Factory: SDKFactory<SDK>>(\n        factory: &Factory,\n    ) -> ProtocolResult<AssetService<SDK>> {\n        Ok(AssetService::new(factory.get_sdk(\"asset\")?))\n    }\n\n    fn new_metadata<SDK: 'static + ServiceSDK, Factory: SDKFactory<SDK>>(\n        factory: &Factory,\n    ) -> ProtocolResult<MetadataService<SDK>> {\n        Ok(MetadataService::new(factory.get_sdk(\"metadata\")?))\n    }\n\n    fn new_dex<SDK: 'static + ServiceSDK, Factory: SDKFactory<SDK>>(\n        factory: &Factory,\n    ) -> ProtocolResult<DexService<SDK, AssetService<SDK>>> {\n        let asset = Self::new_asset(factory)?;\n        Ok(DexService::new(factory.get_sdk(\"dex\")?, asset))\n    }\n}\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"service-示例\"\n    }}>{`Service 示例`}</h2>\n    <p>{`这里有一个功能类似 ERC-20 的 `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/nervosnetwork/muta/tree/master/built-in-services/asset\"\n      }}>{`Asset Service 示例`}</a>{`，读者可以查看一个 Service 的全貌。更多的 Service 示例，请参考 `}<a parentName=\"p\" {...{\n        \"href\": \"./service_eg.md\"\n      }}>{`Service 示例`}</a>{`。`}</p>\n    <h2 {...{\n      \"id\": \"下一站\"\n    }}>{`下一站`}</h2>\n    <p>{`现在你已经对 Service 的组件和开发有了一定的认识，下一步通过学习 `}<a parentName=\"p\" {...{\n        \"href\": \"/new-docs/docs/dev/dex\"\n      }}>{`开发一条 Dex 专有链`}</a>{` ，你将对 Service 有一个更全面的理解并且学会如何使用 Muta 框架开发自己的区块链。`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`注意：由于框架正在持续的开发过程中，所以框架的 api 有可能发生变动`}</p>\n    </blockquote>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}