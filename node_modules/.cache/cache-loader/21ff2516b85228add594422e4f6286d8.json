{"remainingRequest":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/babel-loader/lib/index.js??ref--9-1!/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--9-2!/Users/Yun/Desktop/vdocs/website/new-docs/plugins/guides/markdownLoader.js??ref--9-3!/Users/Yun/Desktop/vdocs/website/new-docs/guides/getting-started/deploying.md","dependencies":[{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/guides/getting-started/deploying.md","mtime":1595936376842},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/.docusaurus/guides/site-guides-getting-started-deploying-md-dc8.json","mtime":1596107390154},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/cache-loader/dist/cjs.js","mtime":1588759099254},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/babel-loader/lib/index.js","mtime":1588759098876},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1588759134386},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/plugins/guides/markdownLoader.js","mtime":1594780808724}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/Yun/Desktop/vdocs/website/new-docs/guides/getting-started/deploying.md"],"names":["React","mdx","frontMatter","last_modified_on","title","description","series_position","author_github","tags","metadata","Steps","rightToc","value","id","children","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["\n  import React from 'react';\n  import { mdx } from '@mdx-js/react';\n\n  export const frontMatter = {\n\tlast_modified_on: '2020-07-13',\n\ttitle: 'Deploy a multi-node blockchain network',\n\tdescription: 'How to deploy a multi-node blockchain network to your target environment',\n\tseries_position: 2,\n\tauthor_github: 'https://github.com/zhouyun-zoe',\n\ttags: [\n\t\t'type: tutorial',\n\t\t'level: easy'\n\t]\n};\nexport const metadata = {\n  \"categories\": [\n    {\n      \"name\": \"getting-started\",\n      \"title\": \"Getting Started\",\n      \"description\": \"Take Vector from zero to production in under 10 minutes.\",\n      \"permalink\": \"/new-docs/guides/getting-started\"\n    }\n  ],\n  \"coverLabel\": \"Deploy a multi-node blockchain network\",\n  \"description\": \"How to deploy a multi-node blockchain network to your target environment\",\n  \"permalink\": \"/new-docs/guides/getting-started/deploying\",\n  \"readingTime\": \"9 min read\",\n  \"seriesPosition\": 2,\n  \"source\": \"@site/guides/getting-started/deploying.md\",\n  \"tags\": [\n    {\n      \"label\": \"type: tutorial\",\n      \"permalink\": \"/new-docs/guides/tags/type-tutorial\"\n    },\n    {\n      \"label\": \"level: easy\",\n      \"permalink\": \"/new-docs/guides/tags/level-easy\"\n    }\n  ],\n  \"title\": \"Deploy a multi-node blockchain network\",\n  \"truncated\": false,\n  \"prevItem\": {\n    \"title\": \"Hello World. Your First Muta Blockchain.\",\n    \"permalink\": \"/new-docs/guides/getting-started/your-first-pipeline\"\n  },\n  \"nextItem\": {\n    \"title\": \"Benchmark the performance of your chain\",\n    \"permalink\": \"/new-docs/guides/getting-started/benchmark\"\n  }\n};\n  /* @jsx mdx */\nimport Steps from '@site/src/components/Steps';\nexport const rightToc = [{\n  value: 'Overview',\n  id: 'overview',\n  children: []\n}, {\n  value: 'Generate key-pairs',\n  id: 'generate-key-pairs',\n  children: [{\n    value: 'Install Muta-keypair',\n    id: 'install-muta-keypair',\n    children: []\n  }, {\n    value: 'Generate Key-pairs',\n    id: 'generate-key-pairs-1',\n    children: []\n  }]\n}, {\n  value: 'Create the Genesis Block',\n  id: 'create-the-genesis-block',\n  children: []\n}, {\n  value: 'Config node parameters',\n  id: 'config-node-parameters',\n  children: [{\n    value: 'Alice configures her node',\n    id: 'alice-configures-her-node',\n    children: []\n  }, {\n    value: 'Others&#39; configuration',\n    id: 'others-configuration',\n    children: []\n  }]\n}, {\n  value: 'Run this network',\n  id: 'run-this-network',\n  children: [{\n    value: 'Alice Starts her node  first.',\n    id: 'alice-starts-her-node--first',\n    children: []\n  }, {\n    value: 'Bob, Ben and Bill Join',\n    id: 'bob-ben-and-bill-join',\n    children: []\n  }]\n}, {\n  value: 'Next Step',\n  id: 'next-step',\n  children: []\n}];\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  rightToc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`In this tutorial we will learn and practice how to start a blockchain network with a validator set of your choosing using Muta. In this case, we will build a four validators' blockchain running on a single server with a single Muta binary , but the process generalizes to more nodes and more complex deploy environment in a straight-forward manner.`}</p>\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p><strong parentName=\"p\">{`This tutorial assumes that you already have Muta compiled on your computer from when you completed the `}<a parentName=\"strong\" {...{\n          \"href\": \"./before-create\"\n        }}>{`Create Your First Muta Chain Tutorial`}</a>{`.`}</strong>{` If you do not, please install and compile Muta framework first.`}</p>\n    <p>{`In this case, we will build a blockchain network with four validators (Alice, Bob, Bill and Ben). And Alice will be the bootstrap node. The tutorial is divided into several sections:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Firstly, each participant should generate their own key-pairs.`}</li>\n      <li parentName=\"ul\">{`And then, create the genesis block and config the node.`}</li>\n      <li parentName=\"ul\">{`With custom chain spec distributed to all participants, we will run the bootstraps node firstly, and then start the other node to connect to bootstraps node.`}</li>\n    </ul>\n    <Steps headingDepth={3} mdxType=\"Steps\">\n      <ol>\n        <li>\n          <h2 {...{\n            \"id\": \"generate-key-pairs\"\n          }}>{`Generate key-pairs`}</h2>\n          <h3 {...{\n            \"id\": \"install-muta-keypair\"\n          }}>{`Install Muta-keypair`}</h3>\n          <p>{`Muta-keypair is a tool the generates keys specifically designed to be used with Muta. Install it by following command:`}</p>\n          <pre><code parentName=\"pre\" {...{}}>{`cargo +nightly install --git https://github.com/nervosnetwork/muta.git --bin muta-keypair\n`}</code></pre>\n          <p>{`Run the help command，then you can see the operation guide:`}</p>\n          <pre><code parentName=\"pre\" {...{}}>{`$ muta-keypair -h\nmuta_keypair 0.1\nMuta Dev <muta@nervos.org>\na tool to generate keypairs for muta\n\nUSAGE:\n    muta-keypair [OPTIONS]\n\nFLAGS:\n    -h, --help       Prints help information\n    -V, --version    Prints version information\n\nOPTIONS:\n    -c, --common_ref <common_ref>           common_ref for bls signature, it will be randomly generated if not passed\n                                            [default: ]\n    -n, --number <number>                   Number of keypairs to generate [default: 4]\n    -p, --private_keys <private_keys>...    Generate keypairs from a given private key vector\n`}</code></pre>\n          <p>{`:::note\n`}<inlineCode parentName=\"p\">{`common_ref`}</inlineCode>{` is a required parameter used when generating BLS signature. And all the validators in a same network should share a common `}<inlineCode parentName=\"p\">{`common_ref`}</inlineCode>{`. So, in here, one option is to let `}<inlineCode parentName=\"p\">{`bootstraps node`}</inlineCode>{` generating `}<inlineCode parentName=\"p\">{`common_ref`}</inlineCode>{` first, and then distribute it to the other node. Another option for validators is to consult together to come up with a string used as `}<inlineCode parentName=\"p\">{`common_ref`}</inlineCode>{` after hex encoding.\n:::`}</p>\n          <p>{`In this case, bootstraps node will generate a `}<inlineCode parentName=\"p\">{`common_ref`}</inlineCode>{` randomly, and then pass it to the other node.`}</p>\n          <h3 {...{\n            \"id\": \"generate-key-pairs-1\"\n          }}>{`Generate Key-pairs`}</h3>\n          <p>{`Alice (bootstraps node) generates her key-pairs:`}</p>\n          <pre><code parentName=\"pre\" {...{}}>{`$ muta-keypair -n 1\n{\n  \"common_ref\": \"0x7446645045376b553041\",\n  \"keypairs\": [\n    {\n      \"index\": 1,\n      \"private_key\": \"0x5b2041e3f47aaf2d44407d3bdf415a4f55bf377352448c4217393f5c34fe270d\",\n      \"public_key\": \"0x0299b6d1ad1961cf7a99b581d103a9f977531f77d67e994bfcd9a7fd82ad230a49\",\n      \"address\": \"0x991ce94e75332da2160363d78b73955738d7a3bc\",\n      \"bls_public_key\": \"0x04076b9ee33b9ef2c5f6f7bf8507dd2e17c65f8b67bee2ca874dde747ef69d7f18ec927de1adca930da61b071d6075ea10172342d0fb50b977b919ab0e4e8306261002b1ed27990b9d6dded5583b91d8801615baee901ed09a2333fc57770d84c8\"\n    }\n  ]\n}\n`}</code></pre>\n          <p>{`After Alice passes the `}<inlineCode parentName=\"p\">{`common_ref`}</inlineCode>{` to Bob, Bill and Ben, they generates his own key-pairs:`}</p>\n          <pre><code parentName=\"pre\" {...{}}>{`$ muta-keypair -n 3 -c 75695962523835457669\n{\n  \"common_ref\": \"0x75695962523835457669\",\n  \"keypairs\": [\n    {\n      \"index\": 1,\n      \"private_key\": \"0x28f53779b60e261ba68cdccefcc6a152136df8cb794e067ec76dc5a02c8f2ccf\",\n      \"public_key\": \"0x0299b6d1ad1961cf7a99b581d103a9f977531f77d67e994bfcd9a7fd82ad230a49\",\n      \"address\": \"0x78ef0eff2fb9f569d86d75d22b69ea8407f6f092\",\n      \"bls_public_key\": \"0x0413584a15f1dec552bb12233bf73a886ed49a3f56c68eda080743577005417635c9ac72a528a961a0e14a2df3a50a5c660641f446f629788486d7935d4ad4918035ce884a98bbaaa4c96307a2428729cba694329a693ce60c02e13b039c6a8978\"\n    },\n    {\n      \"index\": 2,\n      \"private_key\": \"0x8b41630934fc7df92a016af88aae477bd173118fb72113f31db8a950230b029f\",\n      \"public_key\": \"0x030a1cd0213b86976c9e14c1aa8d0167a50c8a5c929f72fcbeaae35d84afa1c2b7\",\n      \"address\": \"0xa55e1261a73116c755291140e427caa0cbb5309e\",\n      \"bls_public_key\": \"0x040e7b00b59d37d4d735041ea1b69a55cd7fd80e920b5d70d85d051af6b847c3aec5b412b128f85ad8b4c6bac0561105a80fa8dd5f60cd42c3a2da0fd0b946fa3d761b1d21c569e0958b847da22dec14a132121027006df8c5d4ccf7caf8535f70\"\n    },\n    {\n      \"index\": 3,\n      \"private_key\": \"0x8e065679aa8b1185406c7514343073cd8c1695218925c9b2d5e98c3483d71d81\",\n      \"public_key\": \"0x027c805020b226a050c317c68d50cb7b0a7d682b5614e23a61c5c08a722c2d44aa\",\n      \"address\": \"0x103252cad4e0380fe57a0c73f549f1ee2c9ea8e8\",\n      \"bls_public_key\": \"0x041611b7da94a7fb7a8ff1c802bbf61da689f8d6f974d99466adeb1f47bcaff70470b6f279763abeb0cec5565abcfcb4ce13e79b8c310f0d1b26605b61ac2c04e0efcedbae18e763a86adb7a0e8ed0fcb1dc11fded12583972403815a7aa3dc300\"\n    }\n  ]\n}\n`}</code></pre>\n          <p>{`From the output we can see, each participant not only has their own keys generated，but also possessed their `}<inlineCode parentName=\"p\">{`bls_public_key`}</inlineCode>{`. Reocord all of these information carellful, we will use it in following steps.`}</p>\n        </li>\n        <li>\n          <h2 {...{\n            \"id\": \"create-the-genesis-block\"\n          }}>{`Create the Genesis Block`}</h2>\n          <p>{`Now that each participant has their own keys generated, in this part, we will create the genesis block for this chain.`}</p>\n          <p>{`Alice find `}<inlineCode parentName=\"p\">{`devtool/chain/genesis.toml`}</inlineCode>{` which contains all the info of genesis block, but it's still filled with default configuration. `}</p>\n          <p>{`Pay attention to following three fields:`}</p>\n          <ul>\n            <li parentName=\"ul\"><strong parentName=\"li\">{`The portion of this file Alice needs to pay attention is the `}<inlineCode parentName=\"strong\">{`verifier_list`}</inlineCode>{`, in which all the origin validators's info need to be filled.`}</strong>{` `}</li>\n            <li parentName=\"ul\">{`Since Overlord consensus protocol supports weghted votes, in here, we can also set `}<inlineCode parentName=\"li\">{`propose_weight`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`propose_weight`}</inlineCode>{`. `}</li>\n            <li parentName=\"ul\">{`And don't forget to modify `}<inlineCode parentName=\"li\">{`common_ref`}</inlineCode>{`.`}</li>\n          </ul>\n          <p>{`:::note\nMore info of the other parameters in `}<inlineCode parentName=\"p\">{`genesis.toml`}</inlineCode>{` can be explored in `}<a parentName=\"p\" {...{\n              \"href\": \"./config.md\"\n            }}>{`configuration guide`}</a>{`.\n:::`}</p>\n          <p>{`After knowing that, Alice adds the other nodes' info into `}<inlineCode parentName=\"p\">{`verifier_list`}</inlineCode>{` , give each validator a weight of 1, modify `}<inlineCode parentName=\"p\">{`common_ref`}</inlineCode>{` and keep the other fields unchanged. Then the `}<inlineCode parentName=\"p\">{`genesis.toml`}</inlineCode>{` looks like this:`}</p>\n          <pre><code parentName=\"pre\" {...{}}>{`timestamp = 0\nprevhash = \"0x44915be5b6c20b0678cf05fcddbbaa832e25d7e6ac538784cd5c24de00d47472\"\n\n[[services]]\nname = \"asset\"\npayload = '''\n{\n    \"id\": \"0xf56924db538e77bb5951eb5ff0d02b88983c49c45eea30e8ae3e7234b311436c\",\n    \"name\": \"MutaToken\",\n    \"symbol\": \"MT\",\n    \"supply\": 320000011,\n    \"issuer\": \"0xf8389d774afdad8755ef8e629e5a154fddc6325a\"\n}\n'''\n\n[[services]]\nname = \"metadata\"\npayload = '''\n{\n    \"chain_id\": \"0xb6a4d7da21443f5e816e8700eea87610e6d769657d6b8ec73028457bf2ca4036\",\n    \"common_ref\": \"0x7446645045376b553041\",\n    \"timeout_gap\": 20,\n    \"cycles_limit\": 999999999999,\n    \"cycles_price\": 1,\n    \"interval\": 3000,\n    \"verifier_list\": [\n        {\n            \"bls_pub_key\": \"0x040386a8ac1cce6fd90c31effa628bc8513cbd625c752ca76ade6ff37b97edbdfb97d94caeddd261d9e2fd6b5456aecc100ea730ddee3c94f040a54152ded330a4e409f39bfbc34b286536790fef8bbaf734431679ba6a8d5d6994e557e82306df\",\n            \"address\": \"0x12d8baf8c4efb32a7983efac2d8535fe57deb756\",\n            \"propose_weight\": 1,\n            \"vote_weight\": 1\n        },\n        {\n            \"bls_pub_key\": \"0x040e7b00b59d37d4d735041ea1b69a55cd7fd80e920b5d70d85d051af6b847c3aec5b412b128f85ad8b4c6bac0561105a80fa8dd5f60cd42c3a2da0fd0b946fa3d761b1d21c569e0958b847da22dec14a132121027006df8c5d4ccf7caf8535f70\",\n            \"address\": \"0xa55e1261a73116c755291140e427caa0cbb5309e\",\n            \"propose_weight\": 1,\n            \"vote_weight\": 1\n        },\n        {\n            \"bls_pub_key\": \"0x0413584a15f1dec552bb12233bf73a886ed49a3f56c68eda080743577005417635c9ac72a528a961a0e14a2df3a50a5c660641f446f629788486d7935d4ad4918035ce884a98bbaaa4c96307a2428729cba694329a693ce60c02e13b039c6a8978\",\n            \"address\": \"0x78ef0eff2fb9f569d86d75d22b69ea8407f6f092\",\n            \"propose_weight\": 1,\n            \"vote_weight\": 1\n        },\n        {\n            \"bls_pub_key\": \"0x041611b7da94a7fb7a8ff1c802bbf61da689f8d6f974d99466adeb1f47bcaff70470b6f279763abeb0cec5565abcfcb4ce13e79b8c310f0d1b26605b61ac2c04e0efcedbae18e763a86adb7a0e8ed0fcb1dc11fded12583972403815a7aa3dc300\",\n            \"address\": \"0x103252cad4e0380fe57a0c73f549f1ee2c9ea8e8\",\n            \"propose_weight\": 1,\n            \"vote_weight\": 1\n        }\n    ],\n    \"propose_ratio\": 15,\n    \"prevote_ratio\": 10,\n    \"precommit_ratio\": 10,\n    \"brake_ratio\": 7,\n    \"tx_num_limit\": 20000,\n    \"max_tx_size\": 1024\n}\n'''\n`}</code></pre>\n          <p>{`Finally Alice shares the `}<inlineCode parentName=\"p\">{`genesis.toml`}</inlineCode>{` with all the other validators in the network. In this case, since these four nodes will run in the same binanry, we can just keep one `}<inlineCode parentName=\"p\">{`genesis.toml`}</inlineCode>{` file under `}<inlineCode parentName=\"p\">{`devtool/chain`}</inlineCode>{` directory.`}</p>\n          <p>{`:::note\nIn production environment, it's highly recommended that bootstraps node create the genesis block first and shared the resulting `}<inlineCode parentName=\"p\">{`genesis.toml`}</inlineCode>{` file with the other validators. Because it's quite easy to get a slightly different genesis block which will break consensus if each participant generates the file themselves.\n:::`}</p>\n        </li>\n        <li>\n          <h2 {...{\n            \"id\": \"config-node-parameters\"\n          }}>{`Config node parameters`}</h2>\n          <p>{`After creating the genesis block, Each validators need to config the node. Node configuration parameters can be found in `}<inlineCode parentName=\"p\">{`devtool/chain/config.toml`}</inlineCode>{`.`}</p>\n          <p><strong parentName=\"p\">{`The fields of this file we need to pay more attention are:`}</strong>{` `}</p>\n          <ul>\n            <li parentName=\"ul\"><inlineCode parentName=\"li\">{`privkey`}</inlineCode>{`: private key of this node`}</li>\n            <li parentName=\"ul\">{`Under `}<inlineCode parentName=\"li\">{`[network]`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`listening_address = \"0.0.0.0:1337\"`}</inlineCode>{` specifies the address that your node will listen.`}</li>\n            <li parentName=\"ul\"><inlineCode parentName=\"li\">{`[[network.bootstraps]]`}</inlineCode>{`, specifies the information of bootstraps node that your node will connect, including the public key and listening address. Bootstrap node can leave this filed empty.`}</li>\n          </ul>\n          <h3 {...{\n            \"id\": \"alice-configures-her-node\"\n          }}>{`Alice configures her node`}</h3>\n          <p>{`After adding required infomation and leaving `}<inlineCode parentName=\"p\">{`[[network.bootstraps]]`}</inlineCode>{` empty  , `}<inlineCode parentName=\"p\">{`config.toml`}</inlineCode>{` in Alice's node looks like:`}</p>\n          <pre><code parentName=\"pre\" {...{}}>{`data_path = \"./devtools/chain/data/1\"\nprivkey = \"0x592d6f62cd5c3464d4956ea585ec7007bcf5217eb89cc50bf14eea95f3b09706\"\n\n[network]\nlistening_address = \"0.0.0.0:1337\"\nrpc_timeout = 10\n\n[graphql]\ngraphiql_uri = \"/graphiql\"\nlistening_address = \"0.0.0.0:8000\"\ngraphql_uri = \"/graphql\"\nworkers = 0 # if 0, uses number of available logical cpu as threads count.\nmaxconn = 25000\nmax_payload_size = 1048576\n\n[mempool]\npool_size = 20000\nbroadcast_txs_size = 200\nbroadcast_txs_interval = 200\n\n[executor]\nlight = false\n\n[logger]\nfilter = \"info\"\nlog_to_console = true\nconsole_show_file_and_line = false\nlog_path = \"logs/\"\nlog_to_file = true\nmetrics = true\n# you can specify log level for modules with config below\n# modules_level = { \"overlord::state::process\" = \"debug\", core_consensus = \"error\" }\n\n`}</code></pre>\n          <h3 {...{\n            \"id\": \"others-configuration\"\n          }}>{`Others' configuration`}</h3>\n          <p><strong parentName=\"p\">{`For Bob:`}</strong></p>\n          <p>{`Bob adds his private key, specifies his `}<inlineCode parentName=\"p\">{`[network]`}</inlineCode>{` and got Alice's infomation to fill into `}<inlineCode parentName=\"p\">{`[[network.bootstraps]]`}</inlineCode>{`.\n( In this case, we also modifies `}<inlineCode parentName=\"p\">{`lisening_adress`}</inlineCode>{` under `}<inlineCode parentName=\"p\">{`[graphql]`}</inlineCode>{`, since these four nodes are on the same server).`}</p>\n          <p>{`Then the `}<inlineCode parentName=\"p\">{`config.toml`}</inlineCode>{` in Bob's node looks like:`}</p>\n          <pre><code parentName=\"pre\" {...{}}>{`data_path = \"./devtools/chain/data/2\"\nprivkey = \"0x8b41630934fc7df92a016af88aae477bd173118fb72113f31db8a950230b029f\"\n\n[network]\nlistening_address = \"0.0.0.0:1338\"\nrpc_timeout = 10\n\n[[network.bootstraps]]\npubkey = \"0x02fa3a27712962a70e3e474363f38661f6a9e56f9cc91efd0d343713d51f3fa355\"\naddress = \"localhost:1337\" # Replace it with your IP\n\n[graphql]\ngraphiql_uri = \"/graphiql\"\nlistening_address = \"0.0.0.0:8001\"\ngraphql_uri = \"/graphql\"\nworkers = 0 # if 0, uses number of available logical cpu as threads count.\nmaxconn = 25000\nmax_payload_size = 1048576\n\n[mempool]\npool_size = 20000\nbroadcast_txs_size = 200\nbroadcast_txs_interval = 200\n\n[executor]\nlight = false\n\n[logger]\nfilter = \"info\"\nlog_to_console = true\nconsole_show_file_and_line = false\nlog_path = \"logs/\"\nlog_to_file = true\nmetrics = true\n# you can specify log level for modules with config below\n# modules_level = { \"overlord::state::process\" = \"debug\", core_consensus = \"error\" }\n`}</code></pre>\n          <p><strong parentName=\"p\">{`For Ben:`}</strong></p>\n          <details>\n            <summary>(click here to view)</summary>\n            <pre><code parentName=\"pre\" {...{}}>{`data_path = \"./devtools/chain/data/2\"\nprivkey = \"0x8b41630934fc7df92a016af88aae477bd173118fb72113f31db8a950230b029f\"\n\n[network]\nlistening_address = \"0.0.0.0:1339\"\nrpc_timeout = 10\n\n[[network.bootstraps]]\npubkey = \"0x02fa3a27712962a70e3e474363f38661f6a9e56f9cc91efd0d343713d51f3fa355\"\naddress = \"localhost:1337\" # Replace it with your IP\n\n[graphql]\ngraphiql_uri = \"/graphiql\"\nlistening_address = \"0.0.0.0:8002\"\ngraphql_uri = \"/graphql\"\nworkers = 0 # if 0, uses number of available logical cpu as threads count.\nmaxconn = 25000\nmax_payload_size = 1048576\n\n[mempool]\npool_size = 20000\nbroadcast_txs_size = 200\nbroadcast_txs_interval = 200\n\n[executor]\nlight = false\n\n[logger]\nfilter = \"info\"\nlog_to_console = true\nconsole_show_file_and_line = false\nlog_path = \"logs/\"\nlog_to_file = true\nmetrics = true\n# you can specify log level for modules with config below\n# modules_level = { \"overlord::state::process\" = \"debug\", core_consensus = \"error\" }\n`}</code></pre>\n          </details>\n          <p><strong parentName=\"p\">{`For Bill:`}</strong></p>\n          <details>\n            <summary>(click here to view)</summary>\n            <pre><code parentName=\"pre\" {...{}}>{`data_path = \"./devtools/chain/data/2\"\nprivkey = \"0x8e065679aa8b1185406c7514343073cd8c1695218925c9b2d5e98c3483d71d81\"\n\n[network]\nlistening_address = \"0.0.0.0:1340\"\nrpc_timeout = 10\n\n[[network.bootstraps]]\npubkey = \"0x02fa3a27712962a70e3e474363f38661f6a9e56f9cc91efd0d343713d51f3fa355\"\naddress = \"localhost:1337\" # Replace it with your IP\n\n[graphql]\ngraphiql_uri = \"/graphiql\"\nlistening_address = \"0.0.0.0:8003\"\ngraphql_uri = \"/graphql\"\nworkers = 0 # if 0, uses number of available logical cpu as threads count.\nmaxconn = 25000\nmax_payload_size = 1048576\n\n[mempool]\npool_size = 20000\nbroadcast_txs_size = 200\nbroadcast_txs_interval = 200\n\n[executor]\nlight = false\n\n[logger]\nfilter = \"info\"\nlog_to_console = true\nconsole_show_file_and_line = false\nlog_path = \"logs/\"\nlog_to_file = true\nmetrics = true\n# you can specify log level for modules with config below\n# modules_level = { \"overlord::state::process\" = \"debug\", core_consensus = \"error\" }\n`}</code></pre>\n          </details>\n          <p>{`In these case , we name the generated file `}<inlineCode parentName=\"p\">{`config-alice.toml`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`config-bob.toml`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`config-ben.toml`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`config-bill.toml`}</inlineCode>{` under `}<inlineCode parentName=\"p\">{`devtools/chain`}</inlineCode>{`.`}</p>\n        </li>\n        <li>\n          <h2 {...{\n            \"id\": \"run-this-network\"\n          }}>{`Run this network`}</h2>\n          <p>{`You've completed all the necessary prep work and you're now ready to launch your chain. We can see these files in our folder:`}</p>\n          <pre><code parentName=\"pre\" {...{}}>{`- devtools\n  - chain\n    - config-alice.toml\n    - config-bob.toml\n    - config-ben.toml\n    - config-bill.toml\n    - genesis.toml\n`}</code></pre>\n          <h3 {...{\n            \"id\": \"alice-starts-her-node--first\"\n          }}>{`Alice Starts her node  first.`}</h3>\n          <p>{`Alice, as the bootstrap node, starts her node firstly by running following command：`}</p>\n          <pre><code parentName=\"pre\" {...{}}>{`CONFIG=./devtools/chain/config-alice.toml GENESIS=./devtools/chain/genesis.toml cargo run --example muta-chain --release\n`}</code></pre>\n          <h3 {...{\n            \"id\": \"bob-ben-and-bill-join\"\n          }}>{`Bob, Ben and Bill Join`}</h3>\n          <p>{`For Bob, run the following command:`}</p>\n          <pre><code parentName=\"pre\" {...{}}>{`CONFIG=./devtools/chain/config-bob.toml GENESIS=./devtools/chain/genesis.toml cargo run --example muta-chain --release\n`}</code></pre>\n          <p>{`For Ben, run the following command:`}</p>\n          <pre><code parentName=\"pre\" {...{}}>{`CONFIG=./devtools/chain/config-ben.toml GENESIS=./devtools/chain/genesis.toml cargo run --example muta-chain --release\n`}</code></pre>\n          <p>{`For Bill, run the following command:`}</p>\n          <pre><code parentName=\"pre\" {...{}}>{`CONFIG=./devtools/chain/config-bill.toml GENESIS=./devtools/chain/genesis.toml cargo run --example muta-chain --release\n`}</code></pre>\n          <p>{`You should see the console outputs something as follows:`}</p>\n          <p><img parentName=\"p\" {...{\n              \"src\": \"/static/img/private-network.png\",\n              \"alt\": null\n            }}></img></p>\n          <p>{`Congratulations! You've started your own blockchain!`}</p>\n        </li>\n      </ol>\n    </Steps>\n    <h2 {...{\n      \"id\": \"next-step\"\n    }}>{`Next Step`}</h2>\n    <p>{`In this tutorial you've learned to generate your own keypairs, create a genesis block, config your node, and start a multi-node network based on your custom configuration.`}</p>\n    <p>{`Your next step may be:`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}