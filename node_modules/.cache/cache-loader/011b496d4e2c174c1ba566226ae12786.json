{"remainingRequest":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/babel-loader/lib/index.js??ref--7-1!/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--7-2!/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--7-3!/Users/Yun/Desktop/vdocs/website/new-docs/docs/docs_zh/dev/service-dev.md","dependencies":[{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/docs/docs_zh/dev/service-dev.md","mtime":1596422932155},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/.docusaurus/docusaurus-plugin-content-docs/site-docs-docs-zh-dev-service-dev-md-661.json","mtime":1596423132317},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/cache-loader/dist/cjs.js","mtime":1588759099254},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/babel-loader/lib/index.js","mtime":1588759098876},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1588759134386},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1588759133114}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/Yun/Desktop/vdocs/website/new-docs/docs/docs_zh/dev/service-dev.md"],"names":["React","mdx","frontMatter","title","metadata","rightToc","value","id","children","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["\n  import React from 'react';\n  import { mdx } from '@mdx-js/react';\n\n  export const frontMatter = {\n\ttitle: 'Service Development Guide'\n};\nexport const metadata = {\n  \"id\": \"docs_zh/dev/service-dev\",\n  \"title\": \"Service Development Guide\",\n  \"description\": \"## 概念\",\n  \"source\": \"@site/docs/docs_zh/dev/service-dev.md\",\n  \"permalink\": \"/new-docs/docs/docs_zh/dev/service-dev\",\n  \"editUrl\": \"https://github.com/nervosnetwork/muta/edit/master/website/docs/docs_zh/dev/service-dev.md\",\n  \"sidebar\": \"docs_zh\",\n  \"previous\": {\n    \"title\": \"Development Overview\",\n    \"permalink\": \"/new-docs/docs/docs_zh/dev/dev-overview\"\n  },\n  \"next\": {\n    \"title\": \"Service List\",\n    \"permalink\": \"/new-docs/docs/docs_zh/service-list/service-overview\"\n  }\n};\n  /* @jsx mdx */\n\nexport const rightToc = [{\n  value: '概念',\n  id: '概念',\n  children: []\n}, {\n  value: '开发范式',\n  id: '开发范式',\n  children: []\n}, {\n  value: '状态存储',\n  id: '状态存储',\n  children: []\n}, {\n  value: '接口方法',\n  id: '接口方法',\n  children: []\n}, {\n  value: '返回值和错误处理',\n  id: '返回值和错误处理',\n  children: []\n}, {\n  value: '创世配置',\n  id: '创世配置',\n  children: []\n}, {\n  value: '资源消耗统计：cycle',\n  id: '资源消耗统计：cycle',\n  children: []\n}, {\n  value: '事件',\n  id: '事件',\n  children: []\n}, {\n  value: 'ServiceContext 中的其他方法',\n  id: 'servicecontext-中的其他方法',\n  children: []\n}, {\n  value: 'Service 调用',\n  id: 'service-调用',\n  children: []\n}, {\n  value: 'Hook',\n  id: 'hook',\n  children: []\n}, {\n  value: '序列化',\n  id: '序列化',\n  children: [{\n    value: 'Json',\n    id: 'json',\n    children: []\n  }, {\n    value: 'RLP',\n    id: 'rlp',\n    children: []\n  }]\n}, {\n  value: '构造方法',\n  id: '构造方法',\n  children: []\n}, {\n  value: 'Service 示例',\n  id: 'service-示例',\n  children: []\n}, {\n  value: '下一站',\n  id: '下一站',\n  children: []\n}];\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  rightToc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2 {...{\n      \"id\": \"概念\"\n    }}>{`概念`}</h2>\n    <p>{`区块链作为一种新的分布式应用，可以简单的理解成一个副本状态机，同时使用密码学做到应用数据的可验证和防篡改。一方面，多个副本的通信和一致性，由 P2P 网络、交易池和共识组件等共同完成，这些组件也是区块链架构中的底层模块，一般很少变动，所以可以固化到框架中直接提供给开发者使用。另一方面，状态机部分往往与链的具体需求和业务相关，需要由开发者进行自定义，框架提供 SDK 来让减轻这部分工作的时间成本和技术复杂度。`}</p>\n    <p>{`Muta 框架将用户自定义部分抽象成一个 Service，同时提供 `}<inlineCode parentName=\"p\">{`ServiceSDK`}</inlineCode>{` 让 Service 开发变得简单和高效。每个 Service 完成一个相对独立的功能，单独维护自己的存储和操作接口，类似一个运行在沙盒里的小型状态机。开发者可以使用 Service 开发链的治理模块、业务逻辑，甚至是将虚拟机接入区块链。除了开发自己的 Service，你也可以复用他人已经开发好的 Service，未来 Muta 框架会提供许多常见功能的 Service，如 Asset、Risc-V 虚拟机、DPoS、多签治理等等。Service 之间可以互相调用，这些 Service 共同组成了链的状态机部分，通过框架接口将状态机接入区块链底层组件，一条专属你的全新链就开发完成啦。`}</p>\n    <p>{`换句话说，使用 Muta 框架开发你自己的区块链只需 3 步：`}</p>\n    <ol>\n      <li parentName=\"ol\">{`思考自己链的专属需求，确定需要哪些 Service`}</li>\n      <li parentName=\"ol\">{`如果需要的 Service 有现成的，可以直接复用；如果没有，可以自己开发`}</li>\n      <li parentName=\"ol\">{`将这些 Service 接入框架，编译运行！`}</li>\n    </ol>\n    <p>{`这篇文章主要介绍 Service 的组成和开发指南。在熟悉 Service 之后，可以阅读 `}<a parentName=\"p\" {...{\n        \"href\": \"dex.md\"\n      }}>{`开发一条 Dex 专有链`}</a>{`，学习如何使用 Muta 框架从零开发一条区块链。`}</p>\n    <h2 {...{\n      \"id\": \"开发范式\"\n    }}>{`开发范式`}</h2>\n    <p>{`在设计 Service 时，我们希望降低开发者的开发门槛，让更多对区块链不那么熟悉的开发者也可以快速上手，开发自己的区块链。在开发体验上，我们希望向开发合约的体验靠拢，如果你已经学会了如何开发合约，那么恭喜你，你也已经学会了如何开发 Service。在开发范式上，我们把 Service 抽象成一个小型状态机，Service 包含普通状态机所拥有的组件：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`状态（存储）`}</li>\n      <li parentName=\"ul\">{`输入（接口）`}</li>\n      <li parentName=\"ul\">{`函数（逻辑）`}</li>\n      <li parentName=\"ul\">{`输出（返回值）`}</li>\n      <li parentName=\"ul\">{`异常和错误处理`}</li>\n    </ul>\n    <p>{`同时也包含区块链特有的一些组件：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`创世块配置`}</li>\n      <li parentName=\"ul\">{`事件`}</li>\n      <li parentName=\"ul\">{`资源消耗统计（Cycle）`}</li>\n      <li parentName=\"ul\">{`与区块链相关的钩子函数，`}<inlineCode parentName=\"li\">{`before_block`}</inlineCode>{` 在一个区块执行前调用 Service 的函数，`}<inlineCode parentName=\"li\">{`after_block`}</inlineCode>{` 在一个区块执行后调用 Service 的函数`}</li>\n    </ul>\n    <p>{`接下来我们分别介绍每个组件。`}</p>\n    <h2 {...{\n      \"id\": \"状态存储\"\n    }}>{`状态存储`}</h2>\n    <p>{`区别于普通程序的存储，区块链的存储需要使用密码学保证数据的可验证和防篡改。`}<inlineCode parentName=\"p\">{`ServiceSDK`}</inlineCode>{` 提供了一些数据类型和接口，让开发者无需关心密码学相关的部分，可以像开发普通程序一样完成状态的存储。`}</p>\n    <p><inlineCode parentName=\"p\">{`ServiceSDK`}</inlineCode>{` 提供了两类存储接口，一类是获得常见数据类型 map、array、uint64、String、Bool 的接口，使用这些数据类型的数据会自动存入区块链的世界状态中。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`pub trait ServiceSDK {\n    // Alloc or recover a \\`Map\\` by\\` var_name\\`\n    fn alloc_or_recover_map<Key: 'static + FixedCodec + PartialEq, Val: 'static + FixedCodec>(\n        &mut self,\n        var_name: &str,\n    ) -> ProtocolResult<Box<dyn StoreMap<Key, Val>>>;\n\n    // Alloc or recover a \\`Array\\` by\\` var_name\\`\n    fn alloc_or_recover_array<Elm: 'static + FixedCodec>(\n        &mut self,\n        var_name: &str,\n    ) -> ProtocolResult<Box<dyn StoreArray<Elm>>>;\n\n    // Alloc or recover a \\`Uint64\\` by\\` var_name\\`\n    fn alloc_or_recover_uint64(&mut self, var_name: &str) -> ProtocolResult<Box<dyn StoreUint64>>;\n\n    // Alloc or recover a \\`String\\` by\\` var_name\\`\n    fn alloc_or_recover_string(&mut self, var_name: &str) -> ProtocolResult<Box<dyn StoreString>>;\n\n    // Alloc or recover a \\`Bool\\` by\\` var_name\\`\n    fn alloc_or_recover_bool(&mut self, var_name: &str) -> ProtocolResult<Box<dyn StoreBool>>;\n\n... ...\n}\n`}</code></pre>\n    <p>{`如果这些数据类型不能满足你的需求，还有一类 key-value 接口：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`pub trait ServiceSDK {\n    // Get a value from the service state by key\n    fn get_value<Key: FixedCodec, Ret: FixedCodec>(&self, key: &Key)\n        -> ProtocolResult<Option<Ret>>;\n\n    // Set a value to the service state by key\n    fn set_value<Key: FixedCodec, Val: FixedCodec>(\n        &mut self,\n        key: Key,\n        val: Val,\n    ) -> ProtocolResult<()>;\n\n    // Get a value from the specified address by key\n    fn get_account_value<Key: FixedCodec, Ret: FixedCodec>(\n        &self,\n        address: &Address,\n        key: &Key,\n    ) -> ProtocolResult<Option<Ret>>;\n\n    // Insert a pair of key / value to the specified address\n    fn set_account_value<Key: FixedCodec, Val: FixedCodec>(\n        &mut self,\n        address: &Address,\n        key: Key,\n        val: Val,\n    ) -> ProtocolResult<()>;\n\n... ...\n}\n`}</code></pre>\n    <p>{`使用这类接口的数据也会自动存储在世界状态中。`}</p>\n    <p>{`你需要使用结构体来封装 Service，以 Dex Service 为例：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`// A dex service\npub struct DexService<SDK: ServiceSDK> {\n    sdk: SDK,\n    trades: Box<dyn StoreMap<Hash, Trade>>,\n    buy_orders: Box<dyn StoreMap<Hash, Order>>,\n    sell_orders: Box<dyn StoreMap<Hash, Order>>,\n    history_orders: Box<dyn StoreMap<Hash, Order>>,\n    validity: Box<dyn StoreUint64>,\n}\n`}</code></pre>\n    <p>{`此外，Service 的结构体中需要包含实现 `}<inlineCode parentName=\"p\">{`ServiceSDK`}</inlineCode>{` trait 的数据类型，通过该类型获得 ServiceSDK 提供的能力。`}</p>\n    <h2 {...{\n      \"id\": \"接口方法\"\n    }}>{`接口方法`}</h2>\n    <p>{`Service 通过过程宏标记方法，来提供链外和其他 Service 可以调用的接口，以 Dex Service 为例：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`#[service]\nimpl<SDK: 'static + ServiceSDK> DexService<SDK> {\n    #[cycles(210_00)]\n    #[write]\n    fn add_trade(&mut self, ctx: ServiceContext, payload: AddTradePayload) -> ProtocolResult<()>;\n\n    #[read]\n    fn get_trades(&self, _ctx: ServiceContext) -> ProtocolResult<GetTradesResponse>;\n\n... ...\n}\n`}</code></pre>\n    <p>{`给 Service 结构体绑定方法的 `}<inlineCode parentName=\"p\">{`impl`}</inlineCode>{` 块中，需要标记 `}<inlineCode parentName=\"p\">{`#[service]`}</inlineCode>{` 过程宏，该过程宏会给 Service 自动实现 `}<inlineCode parentName=\"p\">{`Service`}</inlineCode>{` trait，框架通过该 trait 和 Service 交互。`}</p>\n    <p>{`Dex Service 中定义了增加交易对和读取交易对两个接口方法，标记了 `}<inlineCode parentName=\"p\">{`#[write]`}</inlineCode>{` 的为写方法，该方法可以改变 Service 状态；标记了 `}<inlineCode parentName=\"p\">{`#[read]`}</inlineCode>{` 的为读方法，该方法不能改变 Service 状态；方法的第二个参数必须为 `}<inlineCode parentName=\"p\">{`ServiceContext`}</inlineCode>{` 类型，该类型负责管理交易执行的上下文；方法的第三个参数是可选的，定义接口的输入参数，同时需要为该类型实现序列化 trait，目前框架使用的是 json 序列化方案：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`#[derive(Deserialize, Serialize, Clone, Debug, PartialEq, Eq)]\npub struct AddTradePayload {\n    pub base_asset: Hash,\n    pub counter_party: Hash,\n}\n`}</code></pre>\n    <p>{`接口方法最多只能有这 3 个参数。`}</p>\n    <h2 {...{\n      \"id\": \"返回值和错误处理\"\n    }}>{`返回值和错误处理`}</h2>\n    <p>{`接口方法的返回值统一为 `}<inlineCode parentName=\"p\">{`ProtocolResult<T>`}</inlineCode>{` 类型：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`pub type ProtocolResult<T> = Result<T, ProtocolError>;\n\n#[derive(Debug, Constructor, Display)]\n#[display(fmt = \"[ProtocolError] Kind: {:?} Error: {:?}\", kind, error)]\npub struct ProtocolError {\n    kind:  ProtocolErrorKind,\n    error: Box<dyn Error + Send>,\n}\n\nimpl From<ProtocolError> for Box<dyn Error + Send> {\n    fn from(error: ProtocolError) -> Self {\n        Box::new(error) as Box<dyn Error + Send>\n    }\n}\n\nimpl Error for ProtocolError {}\n`}</code></pre>\n    <p>{`每个 Service 定义自己的错误类型，并将该类型转换为 `}<inlineCode parentName=\"p\">{`ProtocolError`}</inlineCode>{` 供框架统一处理，以 Dex Service 为例`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`#[derive(Debug, Display, From)]\npub enum DexError {\n    #[display(fmt = \"Parsing payload to json failed {:?}\", _0)]\n    JsonParse(serde_json::Error),\n\n    IllegalTrade,\n\n    TradeExisted,\n\n    TradeNotExisted,\n\n    OrderOverdue,\n\n    OrderNotExisted,\n}\n\nimpl std::error::Error for DexError {}\n\nimpl From<DexError> for ProtocolError {\n    fn from(err: DexError) -> ProtocolError {\n        ProtocolError::new(ProtocolErrorKind::Service, Box::new(err))\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"创世配置\"\n    }}>{`创世配置`}</h2>\n    <p>{`如果创世块的世界状态需要包含 Service 的初始状态，可以在 Service 中通过过程宏`}<inlineCode parentName=\"p\">{`#[genesis]`}</inlineCode>{` 标注的 `}<inlineCode parentName=\"p\">{`fn init_genesis`}</inlineCode>{` 方法来完成。框架在创建创世块时，会调用 Service 中标注了 `}<inlineCode parentName=\"p\">{`#[genesis]`}</inlineCode>{` 的方法来完成初始化，该函数最多只有一个。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`#[genesis]\nfn init_genesis(&mut self, payload: GenesisPayload) -> ProtocolResult<()> {\n    self.validity.set(payload.order_validity)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"资源消耗统计：cycle\"\n    }}>{`资源消耗统计：cycle`}</h2>\n    <p>{`接口方法中使用 `}<inlineCode parentName=\"p\">{`ServiceContext`}</inlineCode>{` 的 `}<inlineCode parentName=\"p\">{`fn sub_cycles`}</inlineCode>{` 接口，可以消耗一定数量的 cycles ，接口如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`pub fn sub_cycles(&self, cycles: u64) -> ProtocolResult<()>;\n`}</code></pre>\n    <p>{`此外，如果接口方法消耗的 cycles 是固定数量，可以使用过程宏 `}<inlineCode parentName=\"p\">{`#[cycles(amount)]`}</inlineCode>{` 标记接口方法，框架会自动扣除 `}<inlineCode parentName=\"p\">{`amount`}</inlineCode>{` 数量的 cycles 。例如，创建资产方法消耗固定 210_00 数量的 cycles: `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`#[cycles(210_00)]\n#[write]\nfn create_asset(&mut self, ctx: ServiceContext, payload: CreateAssetPayload) -> ProtocolResult<Asset>;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"事件\"\n    }}>{`事件`}</h2>\n    <p>{`使用 `}<inlineCode parentName=\"p\">{`ServiceContext`}</inlineCode>{` 的 `}<inlineCode parentName=\"p\">{`fn emit_event`}</inlineCode>{` 接口，可以向链外抛出事件信息:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`pub fn emit_event(&self, message: String) -> ProtocolResult<()> ;\n`}</code></pre>\n    <p>{`抛出的事件 message 为 json 序列化的字符串，以 Asset Service 为例：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`let event = TransferEvent {\n    asset_id: payload.asset_id,\n    from: ctx.get_caller(),\n    to: payload.to,\n    value: payload.value,\n};\nlet event_json = serde_json::to_string(&event).map_err(AssetError::JsonParse)?;\nctx.emit_event(event_json)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"servicecontext-中的其他方法\"\n    }}>{`ServiceContext 中的其他方法`}</h2>\n    <p>{`ServiceContext 维护交易执行的上下文，通过 ServiceContext 可以获取的信息有：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`// 获取交易哈希\npub fn get_tx_hash(&self) -> Option<Hash>;\n\n// 获取 nonce\npub fn get_nonce(&self) -> Option<Hash>;\n\n// 获取 cycle 价格\npub fn get_cycles_price(&self) -> u64；\n\n// 获取  cycle limit\npub fn get_cycles_limit(&self) -> u64；\n\n// 获取已消耗 cycles 数量\npub fn get_cycles_used(&self) -> u64；\n\n// 获取交易发起方地址\npub fn get_caller(&self) -> Address；\n\n// 获取交易所在区块高度\npub fn get_current_height(&self) -> u64；\n\n// 获取额外信息\npub fn get_extra(&self) -> Option<Bytes>；\n\n// 获取当前区块时间戳\npub fn get_timestamp(&self) -> u64；\n\n// 抛出事件信息\npub fn emit_event(&self, message: String) -> ProtocolResult<()>；\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"service-调用\"\n    }}>{`Service 调用`}</h2>\n    <p>{`通过 ServiceSDK 提供 `}<inlineCode parentName=\"p\">{`fn write`}</inlineCode>{` 和 `}<inlineCode parentName=\"p\">{`fn read`}</inlineCode>{` 两个方法，可以调用其他 Service。前者可以改变被调用 Service 的状态，后者为只读调用：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`pub trait ServiceSDK {\n    fn read(\n        &self,\n        ctx: &ServiceContext,\n        extra: Option<Bytes>,\n        service: &str,\n        method: &str,\n        payload: &str,\n    ) -> ProtocolResult<String>;\n\n    fn write(\n        &mut self,\n        ctx: &ServiceContext,\n        extra: Option<Bytes>,\n        service: &str,\n        method: &str,\n        payload: &str,\n    ) -> ProtocolResult<String>;\n\n... ...\n}\n`}</code></pre>\n    <p>{`第二个参数 `}<inlineCode parentName=\"p\">{`ServiceContext`}</inlineCode>{` 直接传入自身的上下文；第三个参数传入调用的任意附加信息；第四个参数为被调 Service 的名称；第五个参数为调用其他 Service 的接口方法的名称；第五个参数为调用参数 json 序列化后的字符串；`}</p>\n    <h2 {...{\n      \"id\": \"hook\"\n    }}>{`Hook`}</h2>\n    <p>{`每个区块执行前后，框架会分别调用 Service 的 hook_before、hook_after 方法, 这两个方法需分别使用 `}<inlineCode parentName=\"p\">{`#[hook_before]`}</inlineCode>{`、`}<inlineCode parentName=\"p\">{`#[hook_after]`}</inlineCode>{` 过程宏标记。Service 可借助 hook 功能完成特定逻辑，如 DPoS Service 可在 hook_after 方法中统计候选验证人抵押 token 数量，进行验证人变更等操作；Dex Service 可在 hook_after 方法中对订单进行匹配和成交操作：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`// Hook method in dex service\n#[hook_after]\n    fn deal(&mut self, params: &ExecutorParams) -> ProtocolResult<()>;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"序列化\"\n    }}>{`序列化`}</h2>\n    <p>{`Service 主要使用两种序列化方案: Json 和 `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/ethereum/wiki/wiki/RLP\"\n      }}>{`RLP`}</a>{`;`}</p>\n    <h3 {...{\n      \"id\": \"json\"\n    }}>{`Json`}</h3>\n    <p>{`用户发送交易和返回结果，均使用 json 序列化，因此接口方法的输入参数中的 `}<inlineCode parentName=\"p\">{`payload`}</inlineCode>{` 和返回值 `}<inlineCode parentName=\"p\">{`ProtocolResult<Response>`}</inlineCode>{` 中的 `}<inlineCode parentName=\"p\">{`Response`}</inlineCode>{` 都需要实现 json 序列化的 trait。以 `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mkxbl/muta-tutorial-dex/tree/master/services/asset\"\n      }}>{`Asset Service`}</a>{` 的 `}<inlineCode parentName=\"p\">{`fn create_asset`}</inlineCode>{` 接口方法为例：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`// 接口方法\n#[cycles(210_00)]\n#[write]\nfn create_asset(&mut self, ctx: ServiceContext, payload: CreateAssetPayload) -> ProtocolResult<Asset>;\n\n// 标记 #[derive(Deserialize, Serialize)] 以实现 json 序列化\n#[derive(Deserialize, Serialize, Clone, Debug)]\npub struct CreateAssetPayload {\n    pub name:   String,\n    pub symbol: String,\n    pub supply: u64,\n}\n// 标记 #[derive(Deserialize, Serialize)] 以实现 json 序列化\n#[derive(Deserialize, Serialize, Clone, Debug)]\npub struct Asset {\n    pub id:     Hash,\n    pub name:   String,\n    pub symbol: String,\n    pub supply: u64,\n    pub issuer: Address,\n}\n`}</code></pre>\n    <p>{`Service 之间调用的参数和返回值同样使用 json 序列化，以 `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mkxbl/muta-tutorial-dex/tree/master/services/dex\"\n      }}>{`Dex Service`}</a>{` 调用 `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mkxbl/muta-tutorial-dex/tree/master/services/asset\"\n      }}>{`Asset Service`}</a>{` 为例：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`// 对调用参数进行 json 序列化\nlet payload_str =\n    serde_json::to_string(&lock_asset_payload).map_err(DexError::JsonParse)?;\n\n// 使用 json 序列化之后的参数，进行 service 调用\nself.sdk.write(\n    &self.get_call_asset_ctx(),\n    Some(ADMISSION_TOKEN.clone()),\n    \"asset\",\n    \"lock\",\n    &payload_str,\n)?;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"rlp\"\n    }}>{`RLP`}</h3>\n    <p>{`对于存储到世界状态的数据结构，为了保证序列化的一致性，该数据结构需要实现 `}<inlineCode parentName=\"p\">{`trait FixedCodec`}</inlineCode>{`，我们默认使用 RLP 方案来实现该 trait 。以 `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mkxbl/muta-tutorial-dex/tree/master/services/asset\"\n      }}>{`Asset Service`}</a>{` 为例：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`// Asset 需要存入世界状态 \npub struct AssetService<SDK> {\n    sdk:    SDK,\n    assets: Box<dyn StoreMap<Hash, Asset>>,\n}\n\npub trait FixedCodec: Sized {\n    fn encode_fixed(&self) -> ProtocolResult<Bytes>;\n    fn decode_fixed(bytes: Bytes) -> ProtocolResult<Self>;\n}\n\n// 对 Asset 实现 trait FixedCodec\nimpl FixedCodec for Asset {\n    fn encode_fixed(&self) -> ProtocolResult<Bytes> {\n        Ok(Bytes::from(rlp::encode(self)))\n    }\n\n    fn decode_fixed(bytes: Bytes) -> ProtocolResult<Self> {\n        Ok(rlp::decode(bytes.as_ref()).map_err(FixedCodecError::from)?)\n    }\n}\n// 对 Asset 实现 RLP 反序列化方案\nimpl rlp::Decodable for Asset {\n    fn decode(rlp: &rlp::Rlp) -> Result<Self, rlp::DecoderError> {\n        Ok(Self {\n            id:     rlp.at(0)?.as_val()?,\n            name:   rlp.at(1)?.as_val()?,\n            symbol: rlp.at(2)?.as_val()?,\n            supply: rlp.at(3)?.as_val()?,\n            issuer: rlp.at(4)?.as_val()?,\n        })\n    }\n}\n// 对 Asset 实现 RLP 序列化方案\nimpl rlp::Encodable for Asset {\n    fn rlp_append(&self, s: &mut rlp::RlpStream) {\n        s.begin_list(5)\n            .append(&self.id)\n            .append(&self.name)\n            .append(&self.symbol)\n            .append(&self.supply)\n            .append(&self.issuer);\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"构造方法\"\n    }}>{`构造方法`}</h2>\n    <p>{`构造方法返回 Service 实例，以 Dex Service 为例：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`#[service]\nimpl<SDK: 'static + ServiceSDK> DexService<SDK> {\n    pub fn new(mut sdk: SDK) -> ProtocolResult<Self> {\n        let trades: Box<dyn StoreMap<Hash, Trade>> = sdk.alloc_or_recover_map(TRADES_KEY)?;\n        let buy_orders: Box<dyn StoreMap<Hash, Order>> =\n            sdk.alloc_or_recover_map(BUY_ORDERS_KEY)?;\n        let sell_orders: Box<dyn StoreMap<Hash, Order>> =\n            sdk.alloc_or_recover_map(SELL_ORDERS_KEY)?;\n        let history_orders: Box<dyn StoreMap<Hash, Order>> =\n            sdk.alloc_or_recover_map(HISTORY_ORDERS_KEY)?;\n        let validity: Box<dyn StoreUint64> = sdk.alloc_or_recover_uint64(VALIDITY_KEY)?;\n\n        Ok(Self {\n            sdk,\n            trades,\n            buy_orders,\n            sell_orders,\n            history_orders,\n            validity,\n        })\n    }\n\n... ...\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"service-示例\"\n    }}>{`Service 示例`}</h2>\n    <p>{`这里有一个功能类似 ERC-20 的 `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/nervosnetwork/muta/tree/master/built-in-services/asset\"\n      }}>{`Asset Service 示例`}</a>{`，读者可以查看一个 Service 的全貌。更多的 Service 示例，请参考 `}<a parentName=\"p\" {...{\n        \"href\": \"./service_eg.md\"\n      }}>{`Service 示例`}</a>{`。`}</p>\n    <h2 {...{\n      \"id\": \"下一站\"\n    }}>{`下一站`}</h2>\n    <p>{`现在你已经对 Service 的组件和开发有了一定的认识，下一步通过学习 `}<a parentName=\"p\" {...{\n        \"href\": \"dex.md\"\n      }}>{`开发一条 Dex 专有链`}</a>{` ，你将对 Service 有一个更全面的理解并且学会如何使用 Muta 框架开发自己的区块链。`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`注意：由于框架正在持续的开发过程中，所以框架的 api 有可能发生变动`}</p>\n    </blockquote>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}